
WARG_EFS_6SPM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006028  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080061b8  080061b8  000071b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062a0  080062a0  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080062a0  080062a0  000072a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062a8  080062a8  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062a8  080062a8  000072a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062ac  080062ac  000072ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080062b0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000068  08006318  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08006318  0000830c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d515  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002141  00000000  00000000  000155ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  000176f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4c  00000000  00000000  00018480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023141  00000000  00000000  00018ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f594  00000000  00000000  0003c00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6538  00000000  00000000  0004b5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00121ad9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000418c  00000000  00000000  00121b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00125cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061a0 	.word	0x080061a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080061a0 	.word	0x080061a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <cell_select1>:
const int FULL_SCALE_COUNT  = 4095;
const int VREF_NOMINAL = 1.5; //Volt
const int I2C_GROUP_ADDRESS = 0x20;
const int GVCOUT = 0.3;

void cell_select1() {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af02      	add	r7, sp, #8

	// Go through all possible i2c addresses
  for (uint8_t i = 0; i < 128; i++) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	e023      	b.n	8000aa0 <cell_select1+0x54>

	  if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	b299      	uxth	r1, r3
 8000a60:	2305      	movs	r3, #5
 8000a62:	2203      	movs	r2, #3
 8000a64:	4839      	ldr	r0, [pc, #228]	@ (8000b4c <cell_select1+0x100>)
 8000a66:	f002 fe3b 	bl	80036e0 <HAL_I2C_IsDeviceReady>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d105      	bne.n	8000a7c <cell_select1+0x30>
		  // We got an ack
		  printf("%2x ", i);
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4619      	mov	r1, r3
 8000a74:	4836      	ldr	r0, [pc, #216]	@ (8000b50 <cell_select1+0x104>)
 8000a76:	f004 fc8d 	bl	8005394 <iprintf>
 8000a7a:	e002      	b.n	8000a82 <cell_select1+0x36>
	  } else {
		  printf("-- ");
 8000a7c:	4835      	ldr	r0, [pc, #212]	@ (8000b54 <cell_select1+0x108>)
 8000a7e:	f004 fc89 	bl	8005394 <iprintf>
	  }

	  if (i > 0 && (i + 1) % 16 == 0) printf("\n");
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d008      	beq.n	8000a9a <cell_select1+0x4e>
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <cell_select1+0x4e>
 8000a94:	200a      	movs	r0, #10
 8000a96:	f004 fc8f 	bl	80053b8 <putchar>
  for (uint8_t i = 0; i < 128; i++) {
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	dad7      	bge.n	8000a58 <cell_select1+0xc>

  }

  printf("\n");
 8000aa8:	200a      	movs	r0, #10
 8000aaa:	f004 fc85 	bl	80053b8 <putchar>

  for (uint8_t i = 0; i < 128; i++) {
 8000aae:	2300      	movs	r3, #0
 8000ab0:	71bb      	strb	r3, [r7, #6]
 8000ab2:	e023      	b.n	8000afc <cell_select1+0xb0>

  	  if (HAL_I2C_IsDeviceReady(&hi2c3, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 8000ab4:	79bb      	ldrb	r3, [r7, #6]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	b299      	uxth	r1, r3
 8000abc:	2305      	movs	r3, #5
 8000abe:	2203      	movs	r2, #3
 8000ac0:	4825      	ldr	r0, [pc, #148]	@ (8000b58 <cell_select1+0x10c>)
 8000ac2:	f002 fe0d 	bl	80036e0 <HAL_I2C_IsDeviceReady>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d105      	bne.n	8000ad8 <cell_select1+0x8c>
  		  // We got an ack
  		  printf("%2x ", i);
 8000acc:	79bb      	ldrb	r3, [r7, #6]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	481f      	ldr	r0, [pc, #124]	@ (8000b50 <cell_select1+0x104>)
 8000ad2:	f004 fc5f 	bl	8005394 <iprintf>
 8000ad6:	e002      	b.n	8000ade <cell_select1+0x92>
  	  } else {
  		  printf("-- ");
 8000ad8:	481e      	ldr	r0, [pc, #120]	@ (8000b54 <cell_select1+0x108>)
 8000ada:	f004 fc5b 	bl	8005394 <iprintf>
  	  }

  	  if (i > 0 && (i + 1) % 16 == 0) printf("\n");
 8000ade:	79bb      	ldrb	r3, [r7, #6]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d008      	beq.n	8000af6 <cell_select1+0xaa>
 8000ae4:	79bb      	ldrb	r3, [r7, #6]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	f003 030f 	and.w	r3, r3, #15
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <cell_select1+0xaa>
 8000af0:	200a      	movs	r0, #10
 8000af2:	f004 fc61 	bl	80053b8 <putchar>
  for (uint8_t i = 0; i < 128; i++) {
 8000af6:	79bb      	ldrb	r3, [r7, #6]
 8000af8:	3301      	adds	r3, #1
 8000afa:	71bb      	strb	r3, [r7, #6]
 8000afc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	dad7      	bge.n	8000ab4 <cell_select1+0x68>

    }

    printf("\n");
 8000b04:	200a      	movs	r0, #10
 8000b06:	f004 fc57 	bl	80053b8 <putchar>


  uint8_t data[2] = {0x0 , 0x1};
 8000b0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b0e:	803b      	strh	r3, [r7, #0]
  uint8_t I2C_CellSelect1_Address = 0x21;
 8000b10:	2321      	movs	r3, #33	@ 0x21
 8000b12:	717b      	strb	r3, [r7, #5]

  // Send the data over I2C
  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1 , I2C_CellSelect1_Address, data, sizeof(data), HAL_MAX_DELAY);
 8000b14:	797b      	ldrb	r3, [r7, #5]
 8000b16:	b299      	uxth	r1, r3
 8000b18:	463a      	mov	r2, r7
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2302      	movs	r3, #2
 8000b22:	480a      	ldr	r0, [pc, #40]	@ (8000b4c <cell_select1+0x100>)
 8000b24:	f002 fbce 	bl	80032c4 <HAL_I2C_Master_Transmit>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	713b      	strb	r3, [r7, #4]

  // Check for errors
  if (status != HAL_OK) {
 8000b2c:	793b      	ldrb	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d005      	beq.n	8000b3e <cell_select1+0xf2>
    printf("I2C write failed! Error code: %d\n", status);
 8000b32:	793b      	ldrb	r3, [r7, #4]
 8000b34:	4619      	mov	r1, r3
 8000b36:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <cell_select1+0x110>)
 8000b38:	f004 fc2c 	bl	8005394 <iprintf>
  } else {
     printf("Cell 1 selected successfully.\n");
  }
}
 8000b3c:	e002      	b.n	8000b44 <cell_select1+0xf8>
     printf("Cell 1 selected successfully.\n");
 8000b3e:	4808      	ldr	r0, [pc, #32]	@ (8000b60 <cell_select1+0x114>)
 8000b40:	f004 fc98 	bl	8005474 <puts>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000110 	.word	0x20000110
 8000b50:	080061b8 	.word	0x080061b8
 8000b54:	080061c0 	.word	0x080061c0
 8000b58:	20000164 	.word	0x20000164
 8000b5c:	080061c4 	.word	0x080061c4
 8000b60:	080061e8 	.word	0x080061e8
 8000b64:	00000000 	.word	0x00000000

08000b68 <read_cell1_voltage>:

uint16_t read_cell1_voltage(){
 8000b68:	b5b0      	push	{r4, r5, r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af02      	add	r7, sp, #8
  uint8_t I2C_CELL1_Read_Address = 0x31 << 1;
 8000b6e:	2362      	movs	r3, #98	@ 0x62
 8000b70:	757b      	strb	r3, [r7, #21]
  uint8_t I2C_CELL1_Write_Address = 0x31 << 1;
 8000b72:	2362      	movs	r3, #98	@ 0x62
 8000b74:	753b      	strb	r3, [r7, #20]
  uint8_t I2C_VREF_Write = 0x30;
 8000b76:	2330      	movs	r3, #48	@ 0x30
 8000b78:	74fb      	strb	r3, [r7, #19]
  uint8_t I2C_VREF_Read = 0x31;
 8000b7a:	2331      	movs	r3, #49	@ 0x31
 8000b7c:	74bb      	strb	r3, [r7, #18]


  uint16_t adc_value = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	82fb      	strh	r3, [r7, #22]

  HAL_ADC_Start(&hadc1);
 8000b82:	485b      	ldr	r0, [pc, #364]	@ (8000cf0 <read_cell1_voltage+0x188>)
 8000b84:	f001 f8f2 	bl	8001d6c <HAL_ADC_Start>
    
    
  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b8c:	4858      	ldr	r0, [pc, #352]	@ (8000cf0 <read_cell1_voltage+0x188>)
 8000b8e:	f001 f983 	bl	8001e98 <HAL_ADC_PollForConversion>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d104      	bne.n	8000ba2 <read_cell1_voltage+0x3a>
      adc_value = HAL_ADC_GetValue(&hadc1);
 8000b98:	4855      	ldr	r0, [pc, #340]	@ (8000cf0 <read_cell1_voltage+0x188>)
 8000b9a:	f001 fa0c 	bl	8001fb6 <HAL_ADC_GetValue>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	82fb      	strh	r3, [r7, #22]
  }

  HAL_ADC_Stop(&hadc1); 
 8000ba2:	4853      	ldr	r0, [pc, #332]	@ (8000cf0 <read_cell1_voltage+0x188>)
 8000ba4:	f001 f945 	bl	8001e32 <HAL_ADC_Stop>

  uint8_t VCOUT_CELL1 = ((float)adc_value / FULL_SCALE_COUNT) * VREF_NOMINAL;
 8000ba8:	8afb      	ldrh	r3, [r7, #22]
 8000baa:	ee07 3a90 	vmov	s15, r3
 8000bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000bb2:	eddf 7a50 	vldr	s15, [pc, #320]	@ 8000cf4 <read_cell1_voltage+0x18c>
 8000bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000bbe:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8000cf8 <read_cell1_voltage+0x190>
 8000bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bce:	edc7 7a01 	vstr	s15, [r7, #4]
 8000bd2:	793b      	ldrb	r3, [r7, #4]
 8000bd4:	747b      	strb	r3, [r7, #17]

  uint8_t reg_addr1 = 0x11;  // VC1_CAL register
 8000bd6:	2311      	movs	r3, #17
 8000bd8:	743b      	strb	r3, [r7, #16]
  uint8_t reg_addr2 = 0x10;
 8000bda:	2310      	movs	r3, #16
 8000bdc:	72fb      	strb	r3, [r7, #11]
  uint8_t data1 = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	72bb      	strb	r3, [r7, #10]
  uint8_t data2 = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	727b      	strb	r3, [r7, #9]



  if(HAL_I2C_Master_Transmit(&hi2c1, I2C_CELL1_Write_Address, &data1, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000be6:	7d3b      	ldrb	r3, [r7, #20]
 8000be8:	b299      	uxth	r1, r3
 8000bea:	f107 020a 	add.w	r2, r7, #10
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	4841      	ldr	r0, [pc, #260]	@ (8000cfc <read_cell1_voltage+0x194>)
 8000bf8:	f002 fb64 	bl	80032c4 <HAL_I2C_Master_Transmit>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <read_cell1_voltage+0xa2>
    printf("I2C Write Error!\n");
 8000c02:	483f      	ldr	r0, [pc, #252]	@ (8000d00 <read_cell1_voltage+0x198>)
 8000c04:	f004 fc36 	bl	8005474 <puts>
    return;
 8000c08:	e067      	b.n	8000cda <read_cell1_voltage+0x172>
  }

  if (HAL_I2C_Master_Receive(&hi2c1, I2C_CELL1_Read_Address, &data1, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000c0a:	7d7b      	ldrb	r3, [r7, #21]
 8000c0c:	b299      	uxth	r1, r3
 8000c0e:	f107 020a 	add.w	r2, r7, #10
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2301      	movs	r3, #1
 8000c1a:	4838      	ldr	r0, [pc, #224]	@ (8000cfc <read_cell1_voltage+0x194>)
 8000c1c:	f002 fc6a 	bl	80034f4 <HAL_I2C_Master_Receive>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <read_cell1_voltage+0xc6>
    printf("I2C Read Error!\n");
 8000c26:	4837      	ldr	r0, [pc, #220]	@ (8000d04 <read_cell1_voltage+0x19c>)
 8000c28:	f004 fc24 	bl	8005474 <puts>
    return;
 8000c2c:	e055      	b.n	8000cda <read_cell1_voltage+0x172>
  }
  

  if(HAL_I2C_Master_Transmit(&hi2c1, I2C_VREF_Write, &reg_addr2, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000c2e:	7cfb      	ldrb	r3, [r7, #19]
 8000c30:	b299      	uxth	r1, r3
 8000c32:	f107 020b 	add.w	r2, r7, #11
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	482f      	ldr	r0, [pc, #188]	@ (8000cfc <read_cell1_voltage+0x194>)
 8000c40:	f002 fb40 	bl	80032c4 <HAL_I2C_Master_Transmit>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <read_cell1_voltage+0xea>
    printf("I2C Write Error!\n");
 8000c4a:	482d      	ldr	r0, [pc, #180]	@ (8000d00 <read_cell1_voltage+0x198>)
 8000c4c:	f004 fc12 	bl	8005474 <puts>
    return;
 8000c50:	e043      	b.n	8000cda <read_cell1_voltage+0x172>
  }

  if (HAL_I2C_Master_Receive(&hi2c1, I2C_VREF_Read , &data2, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000c52:	7cbb      	ldrb	r3, [r7, #18]
 8000c54:	b299      	uxth	r1, r3
 8000c56:	f107 0209 	add.w	r2, r7, #9
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2301      	movs	r3, #1
 8000c62:	4826      	ldr	r0, [pc, #152]	@ (8000cfc <read_cell1_voltage+0x194>)
 8000c64:	f002 fc46 	bl	80034f4 <HAL_I2C_Master_Receive>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <read_cell1_voltage+0x10e>
    printf("I2C Read Error!\n");
 8000c6e:	4825      	ldr	r0, [pc, #148]	@ (8000d04 <read_cell1_voltage+0x19c>)
 8000c70:	f004 fc00 	bl	8005474 <puts>
    return;
 8000c74:	e031      	b.n	8000cda <read_cell1_voltage+0x172>
  }

  uint8_t vref_gain_correction = (data2 >> 4) & 0x0F;
 8000c76:	7a7b      	ldrb	r3, [r7, #9]
 8000c78:	091b      	lsrs	r3, r3, #4
 8000c7a:	73fb      	strb	r3, [r7, #15]
  uint8_t offset_correction = (data1 >> 4) & 0x0F;
 8000c7c:	7abb      	ldrb	r3, [r7, #10]
 8000c7e:	091b      	lsrs	r3, r3, #4
 8000c80:	73bb      	strb	r3, [r7, #14]
  uint8_t gain_correction = data1 & 0x0F;
 8000c82:	7abb      	ldrb	r3, [r7, #10]
 8000c84:	f003 030f 	and.w	r3, r3, #15
 8000c88:	737b      	strb	r3, [r7, #13]



  uint8_t Final_CELL1_Voltage = ((VCOUT_CELL1 * vref_gain_correction + offset_correction)/0.3) * (1 + gain_correction);
 8000c8a:	7c7b      	ldrb	r3, [r7, #17]
 8000c8c:	7bfa      	ldrb	r2, [r7, #15]
 8000c8e:	fb03 f202 	mul.w	r2, r3, r2
 8000c92:	7bbb      	ldrb	r3, [r7, #14]
 8000c94:	4413      	add	r3, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fc3c 	bl	8000514 <__aeabi_i2d>
 8000c9c:	a312      	add	r3, pc, #72	@ (adr r3, 8000ce8 <read_cell1_voltage+0x180>)
 8000c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca2:	f7ff fdcb 	bl	800083c <__aeabi_ddiv>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	4614      	mov	r4, r2
 8000cac:	461d      	mov	r5, r3
 8000cae:	7b7b      	ldrb	r3, [r7, #13]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fc2e 	bl	8000514 <__aeabi_i2d>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	4629      	mov	r1, r5
 8000cc0:	f7ff fc92 	bl	80005e8 <__aeabi_dmul>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	4610      	mov	r0, r2
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f7ff fe9e 	bl	8000a0c <__aeabi_d2uiz>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	733b      	strb	r3, [r7, #12]
  return Final_CELL1_Voltage;
 8000cd4:	7b3b      	ldrb	r3, [r7, #12]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	e7ff      	b.n	8000cda <read_cell1_voltage+0x172>

}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	f3af 8000 	nop.w
 8000ce8:	33333333 	.word	0x33333333
 8000cec:	3fd33333 	.word	0x3fd33333
 8000cf0:	20000084 	.word	0x20000084
 8000cf4:	00000fff 	.word	0x00000fff
 8000cf8:	00000001 	.word	0x00000001
 8000cfc:	20000110 	.word	0x20000110
 8000d00:	08006208 	.word	0x08006208
 8000d04:	0800621c 	.word	0x0800621c

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f000 fc61 	bl	80015d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f810 	bl	8000d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f000 f96c 	bl	8000ff0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d18:	f000 f8b6 	bl	8000e88 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000d1c:	f000 f8e8 	bl	8000ef0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000d20:	f000 f926 	bl	8000f70 <MX_I2C3_Init>
  MX_ADC1_Init();
 8000d24:	f000 f84c 	bl	8000dc0 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cell_select1();
 8000d28:	f7ff fe90 	bl	8000a4c <cell_select1>
	  read_cell1_voltage();
 8000d2c:	f7ff ff1c 	bl	8000b68 <read_cell1_voltage>
	  cell_select1();
 8000d30:	bf00      	nop
 8000d32:	e7f9      	b.n	8000d28 <main+0x20>

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b096      	sub	sp, #88	@ 0x58
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	2244      	movs	r2, #68	@ 0x44
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f004 fb9e 	bl	8005484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d56:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d5a:	f003 f8f9 	bl	8003f50 <HAL_PWREx_ControlVoltageScaling>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d64:	f000 f97a 	bl	800105c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d68:	2310      	movs	r3, #16
 8000d6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d74:	2360      	movs	r3, #96	@ 0x60
 8000d76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4618      	mov	r0, r3
 8000d82:	f003 f93b 	bl	8003ffc <HAL_RCC_OscConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000d8c:	f000 f966 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d90:	230f      	movs	r3, #15
 8000d92:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000da4:	463b      	mov	r3, r7
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 fd3b 	bl	8004824 <HAL_RCC_ClockConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000db4:	f000 f952 	bl	800105c <Error_Handler>
  }
}
 8000db8:	bf00      	nop
 8000dba:	3758      	adds	r7, #88	@ 0x58
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
 8000dd4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dd6:	4b29      	ldr	r3, [pc, #164]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000dd8:	4a29      	ldr	r2, [pc, #164]	@ (8000e80 <MX_ADC1_Init+0xc0>)
 8000dda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ddc:	4b27      	ldr	r3, [pc, #156]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000de2:	4b26      	ldr	r3, [pc, #152]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de8:	4b24      	ldr	r3, [pc, #144]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dee:	4b23      	ldr	r3, [pc, #140]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df4:	4b21      	ldr	r3, [pc, #132]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000df6:	2204      	movs	r2, #4
 8000df8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dfa:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e00:	4b1e      	ldr	r3, [pc, #120]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e06:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e14:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e20:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e28:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e36:	4811      	ldr	r0, [pc, #68]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000e38:	f000 fe56 	bl	8001ae8 <HAL_ADC_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000e42:	f000 f90b 	bl	800105c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e46:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <MX_ADC1_Init+0xc4>)
 8000e48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e4a:	2306      	movs	r3, #6
 8000e4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e52:	237f      	movs	r3, #127	@ 0x7f
 8000e54:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e56:	2304      	movs	r3, #4
 8000e58:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	@ (8000e7c <MX_ADC1_Init+0xbc>)
 8000e64:	f001 f8b4 	bl	8001fd0 <HAL_ADC_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e6e:	f000 f8f5 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000084 	.word	0x20000084
 8000e80:	50040000 	.word	0x50040000
 8000e84:	2a000400 	.word	0x2a000400

08000e88 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ee8 <MX_CAN1_Init+0x60>)
 8000e8e:	4a17      	ldr	r2, [pc, #92]	@ (8000eec <MX_CAN1_Init+0x64>)
 8000e90:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000e92:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <MX_CAN1_Init+0x60>)
 8000e94:	2210      	movs	r2, #16
 8000e96:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e98:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <MX_CAN1_Init+0x60>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <MX_CAN1_Init+0x60>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <MX_CAN1_Init+0x60>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <MX_CAN1_Init+0x60>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <MX_CAN1_Init+0x60>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <MX_CAN1_Init+0x60>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <MX_CAN1_Init+0x60>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <MX_CAN1_Init+0x60>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <MX_CAN1_Init+0x60>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <MX_CAN1_Init+0x60>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	@ (8000ee8 <MX_CAN1_Init+0x60>)
 8000ed6:	f001 fdfe 	bl	8002ad6 <HAL_CAN_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000ee0:	f000 f8bc 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200000e8 	.word	0x200000e8
 8000eec:	40006400 	.word	0x40006400

08000ef0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f64 <MX_I2C1_Init+0x74>)
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f68 <MX_I2C1_Init+0x78>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <MX_I2C1_Init+0x74>)
 8000efc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f6c <MX_I2C1_Init+0x7c>)
 8000efe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f00:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <MX_I2C1_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f06:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <MX_I2C1_Init+0x74>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <MX_I2C1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f12:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <MX_I2C1_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <MX_I2C1_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <MX_I2C1_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <MX_I2C1_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f2a:	480e      	ldr	r0, [pc, #56]	@ (8000f64 <MX_I2C1_Init+0x74>)
 8000f2c:	f002 f92e 	bl	800318c <HAL_I2C_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f36:	f000 f891 	bl	800105c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4809      	ldr	r0, [pc, #36]	@ (8000f64 <MX_I2C1_Init+0x74>)
 8000f3e:	f002 ff61 	bl	8003e04 <HAL_I2CEx_ConfigAnalogFilter>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f48:	f000 f888 	bl	800105c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <MX_I2C1_Init+0x74>)
 8000f50:	f002 ffa3 	bl	8003e9a <HAL_I2CEx_ConfigDigitalFilter>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f5a:	f000 f87f 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000110 	.word	0x20000110
 8000f68:	40005400 	.word	0x40005400
 8000f6c:	00100d14 	.word	0x00100d14

08000f70 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <MX_I2C3_Init+0x74>)
 8000f76:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe8 <MX_I2C3_Init+0x78>)
 8000f78:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100D14;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <MX_I2C3_Init+0x74>)
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fec <MX_I2C3_Init+0x7c>)
 8000f7e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000f80:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <MX_I2C3_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f86:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <MX_I2C3_Init+0x74>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <MX_I2C3_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f92:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <MX_I2C3_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <MX_I2C3_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <MX_I2C3_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <MX_I2C3_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000faa:	480e      	ldr	r0, [pc, #56]	@ (8000fe4 <MX_I2C3_Init+0x74>)
 8000fac:	f002 f8ee 	bl	800318c <HAL_I2C_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000fb6:	f000 f851 	bl	800105c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4809      	ldr	r0, [pc, #36]	@ (8000fe4 <MX_I2C3_Init+0x74>)
 8000fbe:	f002 ff21 	bl	8003e04 <HAL_I2CEx_ConfigAnalogFilter>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000fc8:	f000 f848 	bl	800105c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <MX_I2C3_Init+0x74>)
 8000fd0:	f002 ff63 	bl	8003e9a <HAL_I2CEx_ConfigDigitalFilter>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000fda:	f000 f83f 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000164 	.word	0x20000164
 8000fe8:	40005c00 	.word	0x40005c00
 8000fec:	00100d14 	.word	0x00100d14

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <MX_GPIO_Init+0x68>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	4a13      	ldr	r2, [pc, #76]	@ (8001058 <MX_GPIO_Init+0x68>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <MX_GPIO_Init+0x68>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <MX_GPIO_Init+0x68>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <MX_GPIO_Init+0x68>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102a:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <MX_GPIO_Init+0x68>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : OVERCURRENT_Pin */
  GPIO_InitStruct.Pin = OVERCURRENT_Pin;
 8001036:	2308      	movs	r3, #8
 8001038:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(OVERCURRENT_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4619      	mov	r1, r3
 8001048:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104c:	f001 ff24 	bl	8002e98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001050:	bf00      	nop
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40021000 	.word	0x40021000

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <Error_Handler+0x8>

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <HAL_MspInit+0x44>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001072:	4a0e      	ldr	r2, [pc, #56]	@ (80010ac <HAL_MspInit+0x44>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6613      	str	r3, [r2, #96]	@ 0x60
 800107a:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <HAL_MspInit+0x44>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <HAL_MspInit+0x44>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800108a:	4a08      	ldr	r2, [pc, #32]	@ (80010ac <HAL_MspInit+0x44>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001090:	6593      	str	r3, [r2, #88]	@ 0x58
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_MspInit+0x44>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000

080010b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0a2      	sub	sp, #136	@ 0x88
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	225c      	movs	r2, #92	@ 0x5c
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f004 f9d7 	bl	8005484 <memset>
  if(hadc->Instance==ADC1)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a31      	ldr	r2, [pc, #196]	@ (80011a0 <HAL_ADC_MspInit+0xf0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d15b      	bne.n	8001198 <HAL_ADC_MspInit+0xe8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010ea:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010f0:	2301      	movs	r3, #1
 80010f2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80010f4:	2310      	movs	r3, #16
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010f8:	2307      	movs	r3, #7
 80010fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001100:	2302      	movs	r3, #2
 8001102:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001104:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001108:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fd74 	bl	8004bfc <HAL_RCCEx_PeriphCLKConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800111a:	f7ff ff9f 	bl	800105c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800111e:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <HAL_ADC_MspInit+0xf4>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	4a20      	ldr	r2, [pc, #128]	@ (80011a4 <HAL_ADC_MspInit+0xf4>)
 8001124:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112a:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <HAL_ADC_MspInit+0xf4>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <HAL_ADC_MspInit+0xf4>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	4a1a      	ldr	r2, [pc, #104]	@ (80011a4 <HAL_ADC_MspInit+0xf4>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001142:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <HAL_ADC_MspInit+0xf4>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <HAL_ADC_MspInit+0xf4>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	4a14      	ldr	r2, [pc, #80]	@ (80011a4 <HAL_ADC_MspInit+0xf4>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115a:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <HAL_ADC_MspInit+0xf4>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN7
    PA5     ------> ADC1_IN10
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ADC2_FILT_Pin|VCOUT1_FILT_Pin;
 8001166:	2324      	movs	r3, #36	@ 0x24
 8001168:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800116a:	230b      	movs	r3, #11
 800116c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800117c:	f001 fe8c 	bl	8002e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_FILT_Pin|VCOUT2_FILT_Pin;
 8001180:	2303      	movs	r3, #3
 8001182:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001184:	230b      	movs	r3, #11
 8001186:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001190:	4619      	mov	r1, r3
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <HAL_ADC_MspInit+0xf8>)
 8001194:	f001 fe80 	bl	8002e98 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001198:	bf00      	nop
 800119a:	3788      	adds	r7, #136	@ 0x88
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	50040000 	.word	0x50040000
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48000400 	.word	0x48000400

080011ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a18      	ldr	r2, [pc, #96]	@ (800122c <HAL_CAN_MspInit+0x80>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d129      	bne.n	8001222 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <HAL_CAN_MspInit+0x84>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	4a17      	ldr	r2, [pc, #92]	@ (8001230 <HAL_CAN_MspInit+0x84>)
 80011d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <HAL_CAN_MspInit+0x84>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <HAL_CAN_MspInit+0x84>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	4a11      	ldr	r2, [pc, #68]	@ (8001230 <HAL_CAN_MspInit+0x84>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <HAL_CAN_MspInit+0x84>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001210:	2309      	movs	r3, #9
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121e:	f001 fe3b 	bl	8002e98 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	@ 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40006400 	.word	0x40006400
 8001230:	40021000 	.word	0x40021000

08001234 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b0a4      	sub	sp, #144	@ 0x90
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800124c:	f107 0320 	add.w	r3, r7, #32
 8001250:	225c      	movs	r2, #92	@ 0x5c
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f004 f915 	bl	8005484 <memset>
  if(hi2c->Instance==I2C1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a52      	ldr	r2, [pc, #328]	@ (80013a8 <HAL_I2C_MspInit+0x174>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d13c      	bne.n	80012de <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001264:	2340      	movs	r3, #64	@ 0x40
 8001266:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001268:	2300      	movs	r3, #0
 800126a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126c:	f107 0320 	add.w	r3, r7, #32
 8001270:	4618      	mov	r0, r3
 8001272:	f003 fcc3 	bl	8004bfc <HAL_RCCEx_PeriphCLKConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800127c:	f7ff feee 	bl	800105c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	4b4a      	ldr	r3, [pc, #296]	@ (80013ac <HAL_I2C_MspInit+0x178>)
 8001282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001284:	4a49      	ldr	r2, [pc, #292]	@ (80013ac <HAL_I2C_MspInit+0x178>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128c:	4b47      	ldr	r3, [pc, #284]	@ (80013ac <HAL_I2C_MspInit+0x178>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001298:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800129c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800129e:	2312      	movs	r3, #18
 80012a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b0:	2304      	movs	r3, #4
 80012b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012ba:	4619      	mov	r1, r3
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c0:	f001 fdea 	bl	8002e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c4:	4b39      	ldr	r3, [pc, #228]	@ (80013ac <HAL_I2C_MspInit+0x178>)
 80012c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c8:	4a38      	ldr	r2, [pc, #224]	@ (80013ac <HAL_I2C_MspInit+0x178>)
 80012ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d0:	4b36      	ldr	r3, [pc, #216]	@ (80013ac <HAL_I2C_MspInit+0x178>)
 80012d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80012dc:	e060      	b.n	80013a0 <HAL_I2C_MspInit+0x16c>
  else if(hi2c->Instance==I2C3)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a33      	ldr	r2, [pc, #204]	@ (80013b0 <HAL_I2C_MspInit+0x17c>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d15b      	bne.n	80013a0 <HAL_I2C_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80012e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012ec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 fc80 	bl	8004bfc <HAL_RCCEx_PeriphCLKConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8001302:	f7ff feab 	bl	800105c <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b29      	ldr	r3, [pc, #164]	@ (80013ac <HAL_I2C_MspInit+0x178>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	4a28      	ldr	r2, [pc, #160]	@ (80013ac <HAL_I2C_MspInit+0x178>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001312:	4b26      	ldr	r3, [pc, #152]	@ (80013ac <HAL_I2C_MspInit+0x178>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <HAL_I2C_MspInit+0x178>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	4a22      	ldr	r2, [pc, #136]	@ (80013ac <HAL_I2C_MspInit+0x178>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132a:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <HAL_I2C_MspInit+0x178>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001336:	2380      	movs	r3, #128	@ 0x80
 8001338:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133a:	2312      	movs	r3, #18
 800133c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800134c:	2304      	movs	r3, #4
 800134e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001356:	4619      	mov	r1, r3
 8001358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800135c:	f001 fd9c 	bl	8002e98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001360:	2310      	movs	r3, #16
 8001362:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001364:	2312      	movs	r3, #18
 8001366:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001376:	2304      	movs	r3, #4
 8001378:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001380:	4619      	mov	r1, r3
 8001382:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <HAL_I2C_MspInit+0x180>)
 8001384:	f001 fd88 	bl	8002e98 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <HAL_I2C_MspInit+0x178>)
 800138a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800138c:	4a07      	ldr	r2, [pc, #28]	@ (80013ac <HAL_I2C_MspInit+0x178>)
 800138e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001392:	6593      	str	r3, [r2, #88]	@ 0x58
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <HAL_I2C_MspInit+0x178>)
 8001396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001398:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3790      	adds	r7, #144	@ 0x90
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40005400 	.word	0x40005400
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40005c00 	.word	0x40005c00
 80013b4:	48000400 	.word	0x48000400

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <NMI_Handler+0x4>

080013c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <MemManage_Handler+0x4>

080013d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <UsageFault_Handler+0x4>

080013e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140e:	f000 f935 	bl	800167c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}

08001416 <_read>:
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e00a      	b.n	800143e <_read+0x28>
 8001428:	f3af 8000 	nop.w
 800142c:	4601      	mov	r1, r0
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	60ba      	str	r2, [r7, #8]
 8001434:	b2ca      	uxtb	r2, r1
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3301      	adds	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	429a      	cmp	r2, r3
 8001444:	dbf0      	blt.n	8001428 <_read+0x12>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_write>:
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	e009      	b.n	8001476 <_write+0x26>
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	60ba      	str	r2, [r7, #8]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f3af 8000 	nop.w
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	dbf1      	blt.n	8001462 <_write+0x12>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <_close>:
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_fstat>:
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	2300      	movs	r3, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <_isatty>:
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	2301      	movs	r3, #1
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_lseek>:
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	2300      	movs	r3, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <_sbrk>:
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	4a14      	ldr	r2, [pc, #80]	@ (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	@ (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_sbrk+0x40>
 8001520:	f003 ffb8 	bl	8005494 <__errno>
 8001524:	4603      	mov	r3, r0
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800152e:	e009      	b.n	8001544 <_sbrk+0x54>
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000c000 	.word	0x2000c000
 8001550:	00000400 	.word	0x00000400
 8001554:	200001b8 	.word	0x200001b8
 8001558:	20000310 	.word	0x20000310

0800155c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <SystemInit+0x20>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001566:	4a05      	ldr	r2, [pc, #20]	@ (800157c <SystemInit+0x20>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001584:	f7ff ffea 	bl	800155c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001588:	480c      	ldr	r0, [pc, #48]	@ (80015bc <LoopForever+0x6>)
  ldr r1, =_edata
 800158a:	490d      	ldr	r1, [pc, #52]	@ (80015c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800158c:	4a0d      	ldr	r2, [pc, #52]	@ (80015c4 <LoopForever+0xe>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015a0:	4c0a      	ldr	r4, [pc, #40]	@ (80015cc <LoopForever+0x16>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ae:	f003 ff77 	bl	80054a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015b2:	f7ff fba9 	bl	8000d08 <main>

080015b6 <LoopForever>:

LoopForever:
    b LoopForever
 80015b6:	e7fe      	b.n	80015b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015b8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015c4:	080062b0 	.word	0x080062b0
  ldr r2, =_sbss
 80015c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015cc:	2000030c 	.word	0x2000030c

080015d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC1_IRQHandler>

080015d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015dc:	2003      	movs	r0, #3
 80015de:	f001 fc27 	bl	8002e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015e2:	200f      	movs	r0, #15
 80015e4:	f000 f80e 	bl	8001604 <HAL_InitTick>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	71fb      	strb	r3, [r7, #7]
 80015f2:	e001      	b.n	80015f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015f4:	f7ff fd38 	bl	8001068 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f8:	79fb      	ldrb	r3, [r7, #7]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001610:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <HAL_InitTick+0x6c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d023      	beq.n	8001660 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001618:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <HAL_InitTick+0x70>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <HAL_InitTick+0x6c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f001 fc25 	bl	8002e7e <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10f      	bne.n	800165a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d809      	bhi.n	8001654 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001648:	f001 fbfd 	bl	8002e46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800164c:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <HAL_InitTick+0x74>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e007      	b.n	8001664 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e004      	b.n	8001664 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	e001      	b.n	8001664 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008
 8001674:	20000000 	.word	0x20000000
 8001678:	20000004 	.word	0x20000004

0800167c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_IncTick+0x20>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_IncTick+0x24>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <HAL_IncTick+0x24>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000008 	.word	0x20000008
 80016a0:	200001bc 	.word	0x200001bc

080016a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;
 80016a8:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <HAL_GetTick+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	200001bc 	.word	0x200001bc

080016bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	609a      	str	r2, [r3, #8]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	609a      	str	r2, [r3, #8]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3360      	adds	r3, #96	@ 0x60
 8001736:	461a      	mov	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <LL_ADC_SetOffset+0x44>)
 8001746:	4013      	ands	r3, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	4313      	orrs	r3, r2
 8001754:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800175c:	bf00      	nop
 800175e:	371c      	adds	r7, #28
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	03fff000 	.word	0x03fff000

0800176c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3360      	adds	r3, #96	@ 0x60
 800177a:	461a      	mov	r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	3360      	adds	r3, #96	@ 0x60
 80017a8:	461a      	mov	r2, r3
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	431a      	orrs	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017c2:	bf00      	nop
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3330      	adds	r3, #48	@ 0x30
 8001804:	461a      	mov	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	4413      	add	r3, r2
 8001812:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	211f      	movs	r1, #31
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	401a      	ands	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	0e9b      	lsrs	r3, r3, #26
 800182c:	f003 011f 	and.w	r1, r3, #31
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	431a      	orrs	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001840:	bf00      	nop
 8001842:	371c      	adds	r7, #28
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	3314      	adds	r3, #20
 800185c:	461a      	mov	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	0e5b      	lsrs	r3, r3, #25
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	4413      	add	r3, r2
 800186a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	0d1b      	lsrs	r3, r3, #20
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	2107      	movs	r1, #7
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	401a      	ands	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	0d1b      	lsrs	r3, r3, #20
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	431a      	orrs	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001896:	bf00      	nop
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0318 	and.w	r3, r3, #24
 80018c6:	4908      	ldr	r1, [pc, #32]	@ (80018e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018c8:	40d9      	lsrs	r1, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	400b      	ands	r3, r1
 80018ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d2:	431a      	orrs	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	0007ffff 	.word	0x0007ffff

080018ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80018fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6093      	str	r3, [r2, #8]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001920:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001924:	d101      	bne.n	800192a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001948:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800194c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001970:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001974:	d101      	bne.n	800197a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001998:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019c4:	f043 0202 	orr.w	r2, r3, #2
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <LL_ADC_IsEnabled+0x18>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <LL_ADC_IsEnabled+0x1a>
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d101      	bne.n	8001a16 <LL_ADC_IsDisableOngoing+0x18>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <LL_ADC_IsDisableOngoing+0x1a>
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a38:	f043 0204 	orr.w	r2, r3, #4
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a60:	f043 0210 	orr.w	r2, r3, #16
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d101      	bne.n	8001a8c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001aaa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001aae:	f043 0220 	orr.w	r2, r3, #32
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d101      	bne.n	8001ada <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e126      	b.n	8001d50 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff facd 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fef1 	bl	8001910 <LL_ADC_IsDeepPowerDownEnabled>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fed7 	bl	80018ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff0c 	bl	8001960 <LL_ADC_IsInternalRegulatorEnabled>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d115      	bne.n	8001b7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fef0 	bl	8001938 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b58:	4b7f      	ldr	r3, [pc, #508]	@ (8001d58 <HAL_ADC_Init+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	099b      	lsrs	r3, r3, #6
 8001b5e:	4a7f      	ldr	r2, [pc, #508]	@ (8001d5c <HAL_ADC_Init+0x274>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	3301      	adds	r3, #1
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b6c:	e002      	b.n	8001b74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f9      	bne.n	8001b6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff feee 	bl	8001960 <LL_ADC_IsInternalRegulatorEnabled>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10d      	bne.n	8001ba6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b8e:	f043 0210 	orr.w	r2, r3, #16
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9a:	f043 0201 	orr.w	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff62 	bl	8001a74 <LL_ADC_REG_IsConversionOngoing>
 8001bb0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 80bf 	bne.w	8001d3e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f040 80bb 	bne.w	8001d3e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bcc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001bd0:	f043 0202 	orr.w	r2, r3, #2
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fefb 	bl	80019d8 <LL_ADC_IsEnabled>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10b      	bne.n	8001c00 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001be8:	485d      	ldr	r0, [pc, #372]	@ (8001d60 <HAL_ADC_Init+0x278>)
 8001bea:	f7ff fef5 	bl	80019d8 <LL_ADC_IsEnabled>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	485a      	ldr	r0, [pc, #360]	@ (8001d64 <HAL_ADC_Init+0x27c>)
 8001bfc:	f7ff fd5e 	bl	80016bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7e5b      	ldrb	r3, [r3, #25]
 8001c04:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c0a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c10:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c16:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d106      	bne.n	8001c3c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c32:	3b01      	subs	r3, #1
 8001c34:	045b      	lsls	r3, r3, #17
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c48:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	4b42      	ldr	r3, [pc, #264]	@ (8001d68 <HAL_ADC_Init+0x280>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	69b9      	ldr	r1, [r7, #24]
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff26 	bl	8001ac2 <LL_ADC_INJ_IsConversionOngoing>
 8001c76:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d13d      	bne.n	8001cfa <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d13a      	bne.n	8001cfa <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c88:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c90:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ca0:	f023 0302 	bic.w	r3, r3, #2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	69b9      	ldr	r1, [r7, #24]
 8001caa:	430b      	orrs	r3, r1
 8001cac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d118      	bne.n	8001cea <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001cc2:	f023 0304 	bic.w	r3, r3, #4
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001cce:	4311      	orrs	r1, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001cd4:	4311      	orrs	r1, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	611a      	str	r2, [r3, #16]
 8001ce8:	e007      	b.n	8001cfa <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0201 	bic.w	r2, r2, #1
 8001cf8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10c      	bne.n	8001d1c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d08:	f023 010f 	bic.w	r1, r3, #15
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	1e5a      	subs	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d1a:	e007      	b.n	8001d2c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 020f 	bic.w	r2, r2, #15
 8001d2a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d30:	f023 0303 	bic.w	r3, r3, #3
 8001d34:	f043 0201 	orr.w	r2, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d3c:	e007      	b.n	8001d4e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d42:	f043 0210 	orr.w	r2, r3, #16
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	053e2d63 	.word	0x053e2d63
 8001d60:	50040000 	.word	0x50040000
 8001d64:	50040300 	.word	0x50040300
 8001d68:	fff0c007 	.word	0xfff0c007

08001d6c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fe7b 	bl	8001a74 <LL_ADC_REG_IsConversionOngoing>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d14f      	bne.n	8001e24 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_ADC_Start+0x26>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e04b      	b.n	8001e2a <HAL_ADC_Start+0xbe>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fdb6 	bl	800290c <ADC_Enable>
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d137      	bne.n	8001e1a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dca:	d106      	bne.n	8001dda <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd0:	f023 0206 	bic.w	r2, r3, #6
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001dd8:	e002      	b.n	8001de0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	221c      	movs	r2, #28
 8001de6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d007      	beq.n	8001e0e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e02:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e06:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fe06 	bl	8001a24 <LL_ADC_REG_StartConversion>
 8001e18:	e006      	b.n	8001e28 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001e22:	e001      	b.n	8001e28 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
 8001e26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_Stop+0x16>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e023      	b.n	8001e90 <HAL_ADC_Stop+0x5e>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001e50:	2103      	movs	r1, #3
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 fc9e 	bl	8002794 <ADC_ConversionStop>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d111      	bne.n	8001e86 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fdd8 	bl	8002a18 <ADC_Disable>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e76:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d102      	bne.n	8001eb0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001eaa:	2308      	movs	r3, #8
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	e010      	b.n	8001ed2 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d007      	beq.n	8001ece <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec2:	f043 0220 	orr.w	r2, r3, #32
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e06f      	b.n	8001fae <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001ece:	2304      	movs	r3, #4
 8001ed0:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ed2:	f7ff fbe7 	bl	80016a4 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ed8:	e021      	b.n	8001f1e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ee0:	d01d      	beq.n	8001f1e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ee2:	f7ff fbdf 	bl	80016a4 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d302      	bcc.n	8001ef8 <HAL_ADC_PollForConversion+0x60>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d112      	bne.n	8001f1e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10b      	bne.n	8001f1e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0a:	f043 0204 	orr.w	r2, r3, #4
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e047      	b.n	8001fae <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0d6      	beq.n	8001eda <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fc46 	bl	80017ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01c      	beq.n	8001f82 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	7e5b      	ldrb	r3, [r3, #25]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d118      	bne.n	8001f82 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d111      	bne.n	8001f82 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d105      	bne.n	8001f82 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7a:	f043 0201 	orr.w	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d104      	bne.n	8001f9a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2208      	movs	r2, #8
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e008      	b.n	8001fac <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d103      	bne.n	8001fac <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	220c      	movs	r2, #12
 8001faa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b0b6      	sub	sp, #216	@ 0xd8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x22>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e3bb      	b.n	800276a <HAL_ADC_ConfigChannel+0x79a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fd38 	bl	8001a74 <LL_ADC_REG_IsConversionOngoing>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 83a0 	bne.w	800274c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b05      	cmp	r3, #5
 800201a:	d824      	bhi.n	8002066 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	3b02      	subs	r3, #2
 8002022:	2b03      	cmp	r3, #3
 8002024:	d81b      	bhi.n	800205e <HAL_ADC_ConfigChannel+0x8e>
 8002026:	a201      	add	r2, pc, #4	@ (adr r2, 800202c <HAL_ADC_ConfigChannel+0x5c>)
 8002028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202c:	0800203d 	.word	0x0800203d
 8002030:	08002045 	.word	0x08002045
 8002034:	0800204d 	.word	0x0800204d
 8002038:	08002055 	.word	0x08002055
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800203c:	230c      	movs	r3, #12
 800203e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002042:	e010      	b.n	8002066 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002044:	2312      	movs	r3, #18
 8002046:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800204a:	e00c      	b.n	8002066 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800204c:	2318      	movs	r3, #24
 800204e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002052:	e008      	b.n	8002066 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002054:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002058:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800205c:	e003      	b.n	8002066 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800205e:	2306      	movs	r3, #6
 8002060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002064:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002074:	f7ff fbbe 	bl	80017f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fcf9 	bl	8001a74 <LL_ADC_REG_IsConversionOngoing>
 8002082:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fd19 	bl	8001ac2 <LL_ADC_INJ_IsConversionOngoing>
 8002090:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002094:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002098:	2b00      	cmp	r3, #0
 800209a:	f040 81a4 	bne.w	80023e6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800209e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 819f 	bne.w	80023e6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	6819      	ldr	r1, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	461a      	mov	r2, r3
 80020b6:	f7ff fbc9 	bl	800184c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	08db      	lsrs	r3, r3, #3
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d00a      	beq.n	80020f2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6919      	ldr	r1, [r3, #16]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020ec:	f7ff fb1a 	bl	8001724 <LL_ADC_SetOffset>
 80020f0:	e179      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fb37 	bl	800176c <LL_ADC_GetOffsetChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10a      	bne.n	800211e <HAL_ADC_ConfigChannel+0x14e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fb2c 	bl	800176c <LL_ADC_GetOffsetChannel>
 8002114:	4603      	mov	r3, r0
 8002116:	0e9b      	lsrs	r3, r3, #26
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	e01e      	b.n	800215c <HAL_ADC_ConfigChannel+0x18c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fb21 	bl	800176c <LL_ADC_GetOffsetChannel>
 800212a:	4603      	mov	r3, r0
 800212c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800213c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002140:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002144:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800214c:	2320      	movs	r3, #32
 800214e:	e004      	b.n	800215a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002150:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x1a4>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0e9b      	lsrs	r3, r3, #26
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	e018      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x1d6>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002188:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800218c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002190:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002198:	2320      	movs	r3, #32
 800219a:	e004      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800219c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d106      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff faf0 	bl	8001798 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2101      	movs	r1, #1
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fad4 	bl	800176c <LL_ADC_GetOffsetChannel>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10a      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x214>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2101      	movs	r1, #1
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fac9 	bl	800176c <LL_ADC_GetOffsetChannel>
 80021da:	4603      	mov	r3, r0
 80021dc:	0e9b      	lsrs	r3, r3, #26
 80021de:	f003 021f 	and.w	r2, r3, #31
 80021e2:	e01e      	b.n	8002222 <HAL_ADC_ConfigChannel+0x252>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2101      	movs	r1, #1
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fabe 	bl	800176c <LL_ADC_GetOffsetChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002202:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800220a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002212:	2320      	movs	r3, #32
 8002214:	e004      	b.n	8002220 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222a:	2b00      	cmp	r3, #0
 800222c:	d105      	bne.n	800223a <HAL_ADC_ConfigChannel+0x26a>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	0e9b      	lsrs	r3, r3, #26
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	e018      	b.n	800226c <HAL_ADC_ConfigChannel+0x29c>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800224e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002252:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002256:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800225e:	2320      	movs	r3, #32
 8002260:	e004      	b.n	800226c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002262:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800226c:	429a      	cmp	r2, r3
 800226e:	d106      	bne.n	800227e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2200      	movs	r2, #0
 8002276:	2101      	movs	r1, #1
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fa8d 	bl	8001798 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2102      	movs	r1, #2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fa71 	bl	800176c <LL_ADC_GetOffsetChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10a      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x2da>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2102      	movs	r1, #2
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fa66 	bl	800176c <LL_ADC_GetOffsetChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	0e9b      	lsrs	r3, r3, #26
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	e01e      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x318>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2102      	movs	r1, #2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fa5b 	bl	800176c <LL_ADC_GetOffsetChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80022c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80022d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80022d8:	2320      	movs	r3, #32
 80022da:	e004      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80022dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022e0:	fab3 f383 	clz	r3, r3
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x330>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	0e9b      	lsrs	r3, r3, #26
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	e014      	b.n	800232a <HAL_ADC_ConfigChannel+0x35a>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800230e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002310:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002314:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800231c:	2320      	movs	r3, #32
 800231e:	e004      	b.n	800232a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002320:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800232a:	429a      	cmp	r2, r3
 800232c:	d106      	bne.n	800233c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2200      	movs	r2, #0
 8002334:	2102      	movs	r1, #2
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fa2e 	bl	8001798 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2103      	movs	r1, #3
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fa12 	bl	800176c <LL_ADC_GetOffsetChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10a      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x398>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2103      	movs	r1, #3
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fa07 	bl	800176c <LL_ADC_GetOffsetChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	f003 021f 	and.w	r2, r3, #31
 8002366:	e017      	b.n	8002398 <HAL_ADC_ConfigChannel+0x3c8>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2103      	movs	r1, #3
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f9fc 	bl	800176c <LL_ADC_GetOffsetChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002382:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002384:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800238a:	2320      	movs	r3, #32
 800238c:	e003      	b.n	8002396 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800238e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002390:	fab3 f383 	clz	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x3e0>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	0e9b      	lsrs	r3, r3, #26
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	e011      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x404>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80023be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80023c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80023c8:	2320      	movs	r3, #32
 80023ca:	e003      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80023cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d106      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2200      	movs	r2, #0
 80023de:	2103      	movs	r1, #3
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff f9d9 	bl	8001798 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff faf4 	bl	80019d8 <LL_ADC_IsEnabled>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 8140 	bne.w	8002678 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6819      	ldr	r1, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	461a      	mov	r2, r3
 8002406:	f7ff fa4d 	bl	80018a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	4a8f      	ldr	r2, [pc, #572]	@ (800264c <HAL_ADC_ConfigChannel+0x67c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	f040 8131 	bne.w	8002678 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10b      	bne.n	800243e <HAL_ADC_ConfigChannel+0x46e>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	0e9b      	lsrs	r3, r3, #26
 800242c:	3301      	adds	r3, #1
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	2b09      	cmp	r3, #9
 8002434:	bf94      	ite	ls
 8002436:	2301      	movls	r3, #1
 8002438:	2300      	movhi	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	e019      	b.n	8002472 <HAL_ADC_ConfigChannel+0x4a2>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800244c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800244e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002450:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002456:	2320      	movs	r3, #32
 8002458:	e003      	b.n	8002462 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800245a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	3301      	adds	r3, #1
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2b09      	cmp	r3, #9
 800246a:	bf94      	ite	ls
 800246c:	2301      	movls	r3, #1
 800246e:	2300      	movhi	r3, #0
 8002470:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002472:	2b00      	cmp	r3, #0
 8002474:	d079      	beq.n	800256a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247e:	2b00      	cmp	r3, #0
 8002480:	d107      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x4c2>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	0e9b      	lsrs	r3, r3, #26
 8002488:	3301      	adds	r3, #1
 800248a:	069b      	lsls	r3, r3, #26
 800248c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002490:	e015      	b.n	80024be <HAL_ADC_ConfigChannel+0x4ee>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80024a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024a2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80024a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80024aa:	2320      	movs	r3, #32
 80024ac:	e003      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80024ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	3301      	adds	r3, #1
 80024b8:	069b      	lsls	r3, r3, #26
 80024ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_ADC_ConfigChannel+0x50e>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	0e9b      	lsrs	r3, r3, #26
 80024d0:	3301      	adds	r3, #1
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2101      	movs	r1, #1
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	e017      	b.n	800250e <HAL_ADC_ConfigChannel+0x53e>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80024f6:	2320      	movs	r3, #32
 80024f8:	e003      	b.n	8002502 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80024fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	2101      	movs	r1, #1
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	ea42 0103 	orr.w	r1, r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10a      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x564>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	0e9b      	lsrs	r3, r3, #26
 8002524:	3301      	adds	r3, #1
 8002526:	f003 021f 	and.w	r2, r3, #31
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	051b      	lsls	r3, r3, #20
 8002532:	e018      	b.n	8002566 <HAL_ADC_ConfigChannel+0x596>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002544:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800254c:	2320      	movs	r3, #32
 800254e:	e003      	b.n	8002558 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	3301      	adds	r3, #1
 800255a:	f003 021f 	and.w	r2, r3, #31
 800255e:	4613      	mov	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002566:	430b      	orrs	r3, r1
 8002568:	e081      	b.n	800266e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002572:	2b00      	cmp	r3, #0
 8002574:	d107      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x5b6>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	0e9b      	lsrs	r3, r3, #26
 800257c:	3301      	adds	r3, #1
 800257e:	069b      	lsls	r3, r3, #26
 8002580:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002584:	e015      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x5e2>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800259e:	2320      	movs	r3, #32
 80025a0:	e003      	b.n	80025aa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80025a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	069b      	lsls	r3, r3, #26
 80025ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x602>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	0e9b      	lsrs	r3, r3, #26
 80025c4:	3301      	adds	r3, #1
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	e017      	b.n	8002602 <HAL_ADC_ConfigChannel+0x632>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	61bb      	str	r3, [r7, #24]
  return result;
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80025ea:	2320      	movs	r3, #32
 80025ec:	e003      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	fab3 f383 	clz	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	2101      	movs	r1, #1
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	ea42 0103 	orr.w	r1, r2, r3
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10d      	bne.n	800262e <HAL_ADC_ConfigChannel+0x65e>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	0e9b      	lsrs	r3, r3, #26
 8002618:	3301      	adds	r3, #1
 800261a:	f003 021f 	and.w	r2, r3, #31
 800261e:	4613      	mov	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	3b1e      	subs	r3, #30
 8002626:	051b      	lsls	r3, r3, #20
 8002628:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800262c:	e01e      	b.n	800266c <HAL_ADC_ConfigChannel+0x69c>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	60fb      	str	r3, [r7, #12]
  return result;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d104      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002646:	2320      	movs	r3, #32
 8002648:	e006      	b.n	8002658 <HAL_ADC_ConfigChannel+0x688>
 800264a:	bf00      	nop
 800264c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	3301      	adds	r3, #1
 800265a:	f003 021f 	and.w	r2, r3, #31
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	3b1e      	subs	r3, #30
 8002666:	051b      	lsls	r3, r3, #20
 8002668:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800266c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002672:	4619      	mov	r1, r3
 8002674:	f7ff f8ea 	bl	800184c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b3d      	ldr	r3, [pc, #244]	@ (8002774 <HAL_ADC_ConfigChannel+0x7a4>)
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d06c      	beq.n	800275e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002684:	483c      	ldr	r0, [pc, #240]	@ (8002778 <HAL_ADC_ConfigChannel+0x7a8>)
 8002686:	f7ff f83f 	bl	8001708 <LL_ADC_GetCommonPathInternalCh>
 800268a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a3a      	ldr	r2, [pc, #232]	@ (800277c <HAL_ADC_ConfigChannel+0x7ac>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d127      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002698:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800269c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d121      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a35      	ldr	r2, [pc, #212]	@ (8002780 <HAL_ADC_ConfigChannel+0x7b0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d157      	bne.n	800275e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026b6:	4619      	mov	r1, r3
 80026b8:	482f      	ldr	r0, [pc, #188]	@ (8002778 <HAL_ADC_ConfigChannel+0x7a8>)
 80026ba:	f7ff f812 	bl	80016e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026be:	4b31      	ldr	r3, [pc, #196]	@ (8002784 <HAL_ADC_ConfigChannel+0x7b4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	099b      	lsrs	r3, r3, #6
 80026c4:	4a30      	ldr	r2, [pc, #192]	@ (8002788 <HAL_ADC_ConfigChannel+0x7b8>)
 80026c6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026d8:	e002      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	3b01      	subs	r3, #1
 80026de:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f9      	bne.n	80026da <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026e6:	e03a      	b.n	800275e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a27      	ldr	r2, [pc, #156]	@ (800278c <HAL_ADC_ConfigChannel+0x7bc>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d113      	bne.n	800271a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10d      	bne.n	800271a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1f      	ldr	r2, [pc, #124]	@ (8002780 <HAL_ADC_ConfigChannel+0x7b0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d12a      	bne.n	800275e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002708:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800270c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002710:	4619      	mov	r1, r3
 8002712:	4819      	ldr	r0, [pc, #100]	@ (8002778 <HAL_ADC_ConfigChannel+0x7a8>)
 8002714:	f7fe ffe5 	bl	80016e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002718:	e021      	b.n	800275e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1c      	ldr	r2, [pc, #112]	@ (8002790 <HAL_ADC_ConfigChannel+0x7c0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d11c      	bne.n	800275e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002724:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d116      	bne.n	800275e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a12      	ldr	r2, [pc, #72]	@ (8002780 <HAL_ADC_ConfigChannel+0x7b0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d111      	bne.n	800275e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800273a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800273e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002742:	4619      	mov	r1, r3
 8002744:	480c      	ldr	r0, [pc, #48]	@ (8002778 <HAL_ADC_ConfigChannel+0x7a8>)
 8002746:	f7fe ffcc 	bl	80016e2 <LL_ADC_SetCommonPathInternalCh>
 800274a:	e008      	b.n	800275e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002750:	f043 0220 	orr.w	r2, r3, #32
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002766:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800276a:	4618      	mov	r0, r3
 800276c:	37d8      	adds	r7, #216	@ 0xd8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	80080000 	.word	0x80080000
 8002778:	50040300 	.word	0x50040300
 800277c:	c7520000 	.word	0xc7520000
 8002780:	50040000 	.word	0x50040000
 8002784:	20000000 	.word	0x20000000
 8002788:	053e2d63 	.word	0x053e2d63
 800278c:	cb840000 	.word	0xcb840000
 8002790:	80000001 	.word	0x80000001

08002794 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff f962 	bl	8001a74 <LL_ADC_REG_IsConversionOngoing>
 80027b0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff f983 	bl	8001ac2 <LL_ADC_INJ_IsConversionOngoing>
 80027bc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d103      	bne.n	80027cc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8098 	beq.w	80028fc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d02a      	beq.n	8002830 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7e5b      	ldrb	r3, [r3, #25]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d126      	bne.n	8002830 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7e1b      	ldrb	r3, [r3, #24]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d122      	bne.n	8002830 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80027ea:	2301      	movs	r3, #1
 80027ec:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80027ee:	e014      	b.n	800281a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	4a45      	ldr	r2, [pc, #276]	@ (8002908 <ADC_ConversionStop+0x174>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d90d      	bls.n	8002814 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fc:	f043 0210 	orr.w	r2, r3, #16
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e074      	b.n	80028fe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	3301      	adds	r3, #1
 8002818:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002824:	2b40      	cmp	r3, #64	@ 0x40
 8002826:	d1e3      	bne.n	80027f0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2240      	movs	r2, #64	@ 0x40
 800282e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d014      	beq.n	8002860 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff f91a 	bl	8001a74 <LL_ADC_REG_IsConversionOngoing>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00c      	beq.n	8002860 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff f8d7 	bl	80019fe <LL_ADC_IsDisableOngoing>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d104      	bne.n	8002860 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff f8f6 	bl	8001a4c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d014      	beq.n	8002890 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f929 	bl	8001ac2 <LL_ADC_INJ_IsConversionOngoing>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00c      	beq.n	8002890 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff f8bf 	bl	80019fe <LL_ADC_IsDisableOngoing>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d104      	bne.n	8002890 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff f905 	bl	8001a9a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d005      	beq.n	80028a2 <ADC_ConversionStop+0x10e>
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d105      	bne.n	80028a8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800289c:	230c      	movs	r3, #12
 800289e:	617b      	str	r3, [r7, #20]
        break;
 80028a0:	e005      	b.n	80028ae <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80028a2:	2308      	movs	r3, #8
 80028a4:	617b      	str	r3, [r7, #20]
        break;
 80028a6:	e002      	b.n	80028ae <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80028a8:	2304      	movs	r3, #4
 80028aa:	617b      	str	r3, [r7, #20]
        break;
 80028ac:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80028ae:	f7fe fef9 	bl	80016a4 <HAL_GetTick>
 80028b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028b4:	e01b      	b.n	80028ee <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028b6:	f7fe fef5 	bl	80016a4 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	d914      	bls.n	80028ee <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00d      	beq.n	80028ee <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d6:	f043 0210 	orr.w	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e2:	f043 0201 	orr.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e007      	b.n	80028fe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1dc      	bne.n	80028b6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3720      	adds	r7, #32
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	a33fffff 	.word	0xa33fffff

0800290c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff f85b 	bl	80019d8 <LL_ADC_IsEnabled>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d169      	bne.n	80029fc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <ADC_Enable+0xfc>)
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00d      	beq.n	8002952 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293a:	f043 0210 	orr.w	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002946:	f043 0201 	orr.w	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e055      	b.n	80029fe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff f816 	bl	8001988 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800295c:	482b      	ldr	r0, [pc, #172]	@ (8002a0c <ADC_Enable+0x100>)
 800295e:	f7fe fed3 	bl	8001708 <LL_ADC_GetCommonPathInternalCh>
 8002962:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002964:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002968:	2b00      	cmp	r3, #0
 800296a:	d013      	beq.n	8002994 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800296c:	4b28      	ldr	r3, [pc, #160]	@ (8002a10 <ADC_Enable+0x104>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	099b      	lsrs	r3, r3, #6
 8002972:	4a28      	ldr	r2, [pc, #160]	@ (8002a14 <ADC_Enable+0x108>)
 8002974:	fba2 2303 	umull	r2, r3, r2, r3
 8002978:	099b      	lsrs	r3, r3, #6
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	4613      	mov	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002986:	e002      	b.n	800298e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	3b01      	subs	r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f9      	bne.n	8002988 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002994:	f7fe fe86 	bl	80016a4 <HAL_GetTick>
 8002998:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800299a:	e028      	b.n	80029ee <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff f819 	bl	80019d8 <LL_ADC_IsEnabled>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d104      	bne.n	80029b6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe ffe9 	bl	8001988 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029b6:	f7fe fe75 	bl	80016a4 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d914      	bls.n	80029ee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d00d      	beq.n	80029ee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d6:	f043 0210 	orr.w	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e007      	b.n	80029fe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d1cf      	bne.n	800299c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	8000003f 	.word	0x8000003f
 8002a0c:	50040300 	.word	0x50040300
 8002a10:	20000000 	.word	0x20000000
 8002a14:	053e2d63 	.word	0x053e2d63

08002a18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe ffea 	bl	80019fe <LL_ADC_IsDisableOngoing>
 8002a2a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe ffd1 	bl	80019d8 <LL_ADC_IsEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d047      	beq.n	8002acc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d144      	bne.n	8002acc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 030d 	and.w	r3, r3, #13
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d10c      	bne.n	8002a6a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe ffab 	bl	80019b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2203      	movs	r2, #3
 8002a60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a62:	f7fe fe1f 	bl	80016a4 <HAL_GetTick>
 8002a66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a68:	e029      	b.n	8002abe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6e:	f043 0210 	orr.w	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e023      	b.n	8002ace <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a86:	f7fe fe0d 	bl	80016a4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d914      	bls.n	8002abe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa6:	f043 0210 	orr.w	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab2:	f043 0201 	orr.w	r2, r3, #1
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e007      	b.n	8002ace <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1dc      	bne.n	8002a86 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0ed      	b.n	8002cc4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7fe fb59 	bl	80011ac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b0a:	f7fe fdcb 	bl	80016a4 <HAL_GetTick>
 8002b0e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b10:	e012      	b.n	8002b38 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b12:	f7fe fdc7 	bl	80016a4 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b0a      	cmp	r3, #10
 8002b1e:	d90b      	bls.n	8002b38 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2205      	movs	r2, #5
 8002b30:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0c5      	b.n	8002cc4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0e5      	beq.n	8002b12 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0202 	bic.w	r2, r2, #2
 8002b54:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b56:	f7fe fda5 	bl	80016a4 <HAL_GetTick>
 8002b5a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b5c:	e012      	b.n	8002b84 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b5e:	f7fe fda1 	bl	80016a4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b0a      	cmp	r3, #10
 8002b6a:	d90b      	bls.n	8002b84 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2205      	movs	r2, #5
 8002b7c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e09f      	b.n	8002cc4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e5      	bne.n	8002b5e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7e1b      	ldrb	r3, [r3, #24]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d108      	bne.n	8002bac <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	e007      	b.n	8002bbc <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7e5b      	ldrb	r3, [r3, #25]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d108      	bne.n	8002bd6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e007      	b.n	8002be6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002be4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7e9b      	ldrb	r3, [r3, #26]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d108      	bne.n	8002c00 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0220 	orr.w	r2, r2, #32
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	e007      	b.n	8002c10 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0220 	bic.w	r2, r2, #32
 8002c0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7edb      	ldrb	r3, [r3, #27]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d108      	bne.n	8002c2a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0210 	bic.w	r2, r2, #16
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	e007      	b.n	8002c3a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0210 	orr.w	r2, r2, #16
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7f1b      	ldrb	r3, [r3, #28]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d108      	bne.n	8002c54 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0208 	orr.w	r2, r2, #8
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	e007      	b.n	8002c64 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0208 	bic.w	r2, r2, #8
 8002c62:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7f5b      	ldrb	r3, [r3, #29]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d108      	bne.n	8002c7e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0204 	orr.w	r2, r2, #4
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e007      	b.n	8002c8e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0204 	bic.w	r2, r2, #4
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	ea42 0103 	orr.w	r1, r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	1e5a      	subs	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfe:	4a04      	ldr	r2, [pc, #16]	@ (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	60d3      	str	r3, [r2, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d18:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <__NVIC_GetPriorityGrouping+0x18>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	f003 0307 	and.w	r3, r3, #7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	db0a      	blt.n	8002d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	490c      	ldr	r1, [pc, #48]	@ (8002d7c <__NVIC_SetPriority+0x4c>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	0112      	lsls	r2, r2, #4
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	440b      	add	r3, r1
 8002d54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d58:	e00a      	b.n	8002d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4908      	ldr	r1, [pc, #32]	@ (8002d80 <__NVIC_SetPriority+0x50>)
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	3b04      	subs	r3, #4
 8002d68:	0112      	lsls	r2, r2, #4
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	761a      	strb	r2, [r3, #24]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e100 	.word	0xe000e100
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	@ 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f1c3 0307 	rsb	r3, r3, #7
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	bf28      	it	cs
 8002da2:	2304      	movcs	r3, #4
 8002da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d902      	bls.n	8002db4 <NVIC_EncodePriority+0x30>
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3b03      	subs	r3, #3
 8002db2:	e000      	b.n	8002db6 <NVIC_EncodePriority+0x32>
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dcc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43d9      	mvns	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	4313      	orrs	r3, r2
         );
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3724      	adds	r7, #36	@ 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dfc:	d301      	bcc.n	8002e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00f      	b.n	8002e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e02:	4a0a      	ldr	r2, [pc, #40]	@ (8002e2c <SysTick_Config+0x40>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0a:	210f      	movs	r1, #15
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e10:	f7ff ff8e 	bl	8002d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e14:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <SysTick_Config+0x40>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1a:	4b04      	ldr	r3, [pc, #16]	@ (8002e2c <SysTick_Config+0x40>)
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	e000e010 	.word	0xe000e010

08002e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ff47 	bl	8002ccc <__NVIC_SetPriorityGrouping>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e58:	f7ff ff5c 	bl	8002d14 <__NVIC_GetPriorityGrouping>
 8002e5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	6978      	ldr	r0, [r7, #20]
 8002e64:	f7ff ff8e 	bl	8002d84 <NVIC_EncodePriority>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff5d 	bl	8002d30 <__NVIC_SetPriority>
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff ffb0 	bl	8002dec <SysTick_Config>
 8002e8c:	4603      	mov	r3, r0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea6:	e154      	b.n	8003152 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2101      	movs	r1, #1
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 8146 	beq.w	800314c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d005      	beq.n	8002ed8 <HAL_GPIO_Init+0x40>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d130      	bne.n	8002f3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f0e:	2201      	movs	r2, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	091b      	lsrs	r3, r3, #4
 8002f24:	f003 0201 	and.w	r2, r3, #1
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d017      	beq.n	8002f76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	2203      	movs	r2, #3
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d123      	bne.n	8002fca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	08da      	lsrs	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3208      	adds	r2, #8
 8002f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	220f      	movs	r2, #15
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	08da      	lsrs	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3208      	adds	r2, #8
 8002fc4:	6939      	ldr	r1, [r7, #16]
 8002fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 0203 	and.w	r2, r3, #3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80a0 	beq.w	800314c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300c:	4b58      	ldr	r3, [pc, #352]	@ (8003170 <HAL_GPIO_Init+0x2d8>)
 800300e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003010:	4a57      	ldr	r2, [pc, #348]	@ (8003170 <HAL_GPIO_Init+0x2d8>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6613      	str	r3, [r2, #96]	@ 0x60
 8003018:	4b55      	ldr	r3, [pc, #340]	@ (8003170 <HAL_GPIO_Init+0x2d8>)
 800301a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003024:	4a53      	ldr	r2, [pc, #332]	@ (8003174 <HAL_GPIO_Init+0x2dc>)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	3302      	adds	r3, #2
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	220f      	movs	r2, #15
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800304e:	d019      	beq.n	8003084 <HAL_GPIO_Init+0x1ec>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a49      	ldr	r2, [pc, #292]	@ (8003178 <HAL_GPIO_Init+0x2e0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d013      	beq.n	8003080 <HAL_GPIO_Init+0x1e8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a48      	ldr	r2, [pc, #288]	@ (800317c <HAL_GPIO_Init+0x2e4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00d      	beq.n	800307c <HAL_GPIO_Init+0x1e4>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a47      	ldr	r2, [pc, #284]	@ (8003180 <HAL_GPIO_Init+0x2e8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d007      	beq.n	8003078 <HAL_GPIO_Init+0x1e0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a46      	ldr	r2, [pc, #280]	@ (8003184 <HAL_GPIO_Init+0x2ec>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d101      	bne.n	8003074 <HAL_GPIO_Init+0x1dc>
 8003070:	2304      	movs	r3, #4
 8003072:	e008      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 8003074:	2307      	movs	r3, #7
 8003076:	e006      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 8003078:	2303      	movs	r3, #3
 800307a:	e004      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 800307c:	2302      	movs	r3, #2
 800307e:	e002      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 8003084:	2300      	movs	r3, #0
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	f002 0203 	and.w	r2, r2, #3
 800308c:	0092      	lsls	r2, r2, #2
 800308e:	4093      	lsls	r3, r2
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003096:	4937      	ldr	r1, [pc, #220]	@ (8003174 <HAL_GPIO_Init+0x2dc>)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	3302      	adds	r3, #2
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030a4:	4b38      	ldr	r3, [pc, #224]	@ (8003188 <HAL_GPIO_Init+0x2f0>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003188 <HAL_GPIO_Init+0x2f0>)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003188 <HAL_GPIO_Init+0x2f0>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	43db      	mvns	r3, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4013      	ands	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030f2:	4a25      	ldr	r2, [pc, #148]	@ (8003188 <HAL_GPIO_Init+0x2f0>)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030f8:	4b23      	ldr	r3, [pc, #140]	@ (8003188 <HAL_GPIO_Init+0x2f0>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	43db      	mvns	r3, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4013      	ands	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800311c:	4a1a      	ldr	r2, [pc, #104]	@ (8003188 <HAL_GPIO_Init+0x2f0>)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003122:	4b19      	ldr	r3, [pc, #100]	@ (8003188 <HAL_GPIO_Init+0x2f0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	43db      	mvns	r3, r3
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003146:	4a10      	ldr	r2, [pc, #64]	@ (8003188 <HAL_GPIO_Init+0x2f0>)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3301      	adds	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	fa22 f303 	lsr.w	r3, r2, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	f47f aea3 	bne.w	8002ea8 <HAL_GPIO_Init+0x10>
  }
}
 8003162:	bf00      	nop
 8003164:	bf00      	nop
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	40021000 	.word	0x40021000
 8003174:	40010000 	.word	0x40010000
 8003178:	48000400 	.word	0x48000400
 800317c:	48000800 	.word	0x48000800
 8003180:	48000c00 	.word	0x48000c00
 8003184:	48001000 	.word	0x48001000
 8003188:	40010400 	.word	0x40010400

0800318c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e08d      	b.n	80032ba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe f83e 	bl	8001234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2224      	movs	r2, #36	@ 0x24
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d107      	bne.n	8003206 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	e006      	b.n	8003214 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003212:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d108      	bne.n	800322e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800322a:	605a      	str	r2, [r3, #4]
 800322c:	e007      	b.n	800323e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800323c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800324c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003250:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003260:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69d9      	ldr	r1, [r3, #28]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1a      	ldr	r2, [r3, #32]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	461a      	mov	r2, r3
 80032d0:	460b      	mov	r3, r1
 80032d2:	817b      	strh	r3, [r7, #10]
 80032d4:	4613      	mov	r3, r2
 80032d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	f040 80fd 	bne.w	80034e0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_I2C_Master_Transmit+0x30>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e0f6      	b.n	80034e2 <HAL_I2C_Master_Transmit+0x21e>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032fc:	f7fe f9d2 	bl	80016a4 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2319      	movs	r3, #25
 8003308:	2201      	movs	r2, #1
 800330a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 faf6 	bl	8003900 <I2C_WaitOnFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e0e1      	b.n	80034e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2221      	movs	r2, #33	@ 0x21
 8003322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2210      	movs	r2, #16
 800332a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	893a      	ldrh	r2, [r7, #8]
 800333e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	2bff      	cmp	r3, #255	@ 0xff
 800334e:	d906      	bls.n	800335e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	22ff      	movs	r2, #255	@ 0xff
 8003354:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003356:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	e007      	b.n	800336e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003368:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800336c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003372:	2b00      	cmp	r3, #0
 8003374:	d024      	beq.n	80033c0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337a:	781a      	ldrb	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	8979      	ldrh	r1, [r7, #10]
 80033b2:	4b4e      	ldr	r3, [pc, #312]	@ (80034ec <HAL_I2C_Master_Transmit+0x228>)
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 fcf1 	bl	8003da0 <I2C_TransferConfig>
 80033be:	e066      	b.n	800348e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	8979      	ldrh	r1, [r7, #10]
 80033c8:	4b48      	ldr	r3, [pc, #288]	@ (80034ec <HAL_I2C_Master_Transmit+0x228>)
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 fce6 	bl	8003da0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033d4:	e05b      	b.n	800348e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	6a39      	ldr	r1, [r7, #32]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fae9 	bl	80039b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e07b      	b.n	80034e2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d034      	beq.n	800348e <HAL_I2C_Master_Transmit+0x1ca>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	d130      	bne.n	800348e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	2200      	movs	r2, #0
 8003434:	2180      	movs	r1, #128	@ 0x80
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fa62 	bl	8003900 <I2C_WaitOnFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e04d      	b.n	80034e2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	2bff      	cmp	r3, #255	@ 0xff
 800344e:	d90e      	bls.n	800346e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	22ff      	movs	r2, #255	@ 0xff
 8003454:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345a:	b2da      	uxtb	r2, r3
 800345c:	8979      	ldrh	r1, [r7, #10]
 800345e:	2300      	movs	r3, #0
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 fc9a 	bl	8003da0 <I2C_TransferConfig>
 800346c:	e00f      	b.n	800348e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347c:	b2da      	uxtb	r2, r3
 800347e:	8979      	ldrh	r1, [r7, #10]
 8003480:	2300      	movs	r3, #0
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fc89 	bl	8003da0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d19e      	bne.n	80033d6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	6a39      	ldr	r1, [r7, #32]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 facf 	bl	8003a40 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e01a      	b.n	80034e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2220      	movs	r2, #32
 80034b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6859      	ldr	r1, [r3, #4]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b0c      	ldr	r3, [pc, #48]	@ (80034f0 <HAL_I2C_Master_Transmit+0x22c>)
 80034c0:	400b      	ands	r3, r1
 80034c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	e000      	b.n	80034e2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
  }
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	80002000 	.word	0x80002000
 80034f0:	fe00e800 	.word	0xfe00e800

080034f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	461a      	mov	r2, r3
 8003500:	460b      	mov	r3, r1
 8003502:	817b      	strh	r3, [r7, #10]
 8003504:	4613      	mov	r3, r2
 8003506:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b20      	cmp	r3, #32
 8003512:	f040 80db 	bne.w	80036cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_I2C_Master_Receive+0x30>
 8003520:	2302      	movs	r3, #2
 8003522:	e0d4      	b.n	80036ce <HAL_I2C_Master_Receive+0x1da>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800352c:	f7fe f8ba 	bl	80016a4 <HAL_GetTick>
 8003530:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	2319      	movs	r3, #25
 8003538:	2201      	movs	r2, #1
 800353a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f9de 	bl	8003900 <I2C_WaitOnFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0bf      	b.n	80036ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2222      	movs	r2, #34	@ 0x22
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2210      	movs	r2, #16
 800355a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	893a      	ldrh	r2, [r7, #8]
 800356e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	2bff      	cmp	r3, #255	@ 0xff
 800357e:	d90e      	bls.n	800359e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358a:	b2da      	uxtb	r2, r3
 800358c:	8979      	ldrh	r1, [r7, #10]
 800358e:	4b52      	ldr	r3, [pc, #328]	@ (80036d8 <HAL_I2C_Master_Receive+0x1e4>)
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fc02 	bl	8003da0 <I2C_TransferConfig>
 800359c:	e06d      	b.n	800367a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	8979      	ldrh	r1, [r7, #10]
 80035b0:	4b49      	ldr	r3, [pc, #292]	@ (80036d8 <HAL_I2C_Master_Receive+0x1e4>)
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fbf1 	bl	8003da0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80035be:	e05c      	b.n	800367a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	6a39      	ldr	r1, [r7, #32]
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fa7f 	bl	8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e07c      	b.n	80036ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d034      	beq.n	800367a <HAL_I2C_Master_Receive+0x186>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	d130      	bne.n	800367a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	2200      	movs	r2, #0
 8003620:	2180      	movs	r1, #128	@ 0x80
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f96c 	bl	8003900 <I2C_WaitOnFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e04d      	b.n	80036ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	2bff      	cmp	r3, #255	@ 0xff
 800363a:	d90e      	bls.n	800365a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	22ff      	movs	r2, #255	@ 0xff
 8003640:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003646:	b2da      	uxtb	r2, r3
 8003648:	8979      	ldrh	r1, [r7, #10]
 800364a:	2300      	movs	r3, #0
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fba4 	bl	8003da0 <I2C_TransferConfig>
 8003658:	e00f      	b.n	800367a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003668:	b2da      	uxtb	r2, r3
 800366a:	8979      	ldrh	r1, [r7, #10]
 800366c:	2300      	movs	r3, #0
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fb93 	bl	8003da0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d19d      	bne.n	80035c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	6a39      	ldr	r1, [r7, #32]
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f9d9 	bl	8003a40 <I2C_WaitOnSTOPFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e01a      	b.n	80036ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2220      	movs	r2, #32
 800369e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4b0c      	ldr	r3, [pc, #48]	@ (80036dc <HAL_I2C_Master_Receive+0x1e8>)
 80036ac:	400b      	ands	r3, r1
 80036ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e000      	b.n	80036ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80036cc:	2302      	movs	r3, #2
  }
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	80002400 	.word	0x80002400
 80036dc:	fe00e800 	.word	0xfe00e800

080036e0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	@ 0x28
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	460b      	mov	r3, r1
 80036ee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	f040 80d6 	bne.w	80038ae <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800370c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003710:	d101      	bne.n	8003716 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003712:	2302      	movs	r3, #2
 8003714:	e0cc      	b.n	80038b0 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_I2C_IsDeviceReady+0x44>
 8003720:	2302      	movs	r3, #2
 8003722:	e0c5      	b.n	80038b0 <HAL_I2C_IsDeviceReady+0x1d0>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2224      	movs	r2, #36	@ 0x24
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_I2C_IsDeviceReady+0x72>
 8003742:	897b      	ldrh	r3, [r7, #10]
 8003744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003748:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800374c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003750:	e006      	b.n	8003760 <HAL_I2C_IsDeviceReady+0x80>
 8003752:	897b      	ldrh	r3, [r7, #10]
 8003754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003758:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800375c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003766:	f7fd ff9d 	bl	80016a4 <HAL_GetTick>
 800376a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b20      	cmp	r3, #32
 8003778:	bf0c      	ite	eq
 800377a:	2301      	moveq	r3, #1
 800377c:	2300      	movne	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b10      	cmp	r3, #16
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003798:	e034      	b.n	8003804 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037a0:	d01a      	beq.n	80037d8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037a2:	f7fd ff7f 	bl	80016a4 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d302      	bcc.n	80037b8 <HAL_I2C_IsDeviceReady+0xd8>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10f      	bne.n	80037d8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c4:	f043 0220 	orr.w	r2, r3, #32
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e06b      	b.n	80038b0 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	bf0c      	ite	eq
 80037e6:	2301      	moveq	r3, #1
 80037e8:	2300      	movne	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003804:	7ffb      	ldrb	r3, [r7, #31]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <HAL_I2C_IsDeviceReady+0x130>
 800380a:	7fbb      	ldrb	r3, [r7, #30]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0c4      	beq.n	800379a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b10      	cmp	r3, #16
 800381c:	d01a      	beq.n	8003854 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2200      	movs	r2, #0
 8003826:	2120      	movs	r1, #32
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f869 	bl	8003900 <I2C_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e03b      	b.n	80038b0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2220      	movs	r2, #32
 800383e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	e02d      	b.n	80038b0 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2200      	movs	r2, #0
 800385c:	2120      	movs	r1, #32
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 f84e 	bl	8003900 <I2C_WaitOnFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e020      	b.n	80038b0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2210      	movs	r2, #16
 8003874:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2220      	movs	r2, #32
 800387c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	3301      	adds	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	429a      	cmp	r2, r3
 800388a:	f63f af56 	bhi.w	800373a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	f043 0220 	orr.w	r2, r3, #32
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
  }
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d103      	bne.n	80038d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2200      	movs	r2, #0
 80038d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d007      	beq.n	80038f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	619a      	str	r2, [r3, #24]
  }
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003910:	e03b      	b.n	800398a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	6839      	ldr	r1, [r7, #0]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f962 	bl	8003be0 <I2C_IsErrorOccurred>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e041      	b.n	80039aa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800392c:	d02d      	beq.n	800398a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800392e:	f7fd feb9 	bl	80016a4 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d302      	bcc.n	8003944 <I2C_WaitOnFlagUntilTimeout+0x44>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d122      	bne.n	800398a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4013      	ands	r3, r2
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	429a      	cmp	r2, r3
 8003952:	bf0c      	ite	eq
 8003954:	2301      	moveq	r3, #1
 8003956:	2300      	movne	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	429a      	cmp	r2, r3
 8003960:	d113      	bne.n	800398a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e00f      	b.n	80039aa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699a      	ldr	r2, [r3, #24]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4013      	ands	r3, r2
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	bf0c      	ite	eq
 800399a:	2301      	moveq	r3, #1
 800399c:	2300      	movne	r3, #0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d0b4      	beq.n	8003912 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039be:	e033      	b.n	8003a28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f90b 	bl	8003be0 <I2C_IsErrorOccurred>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e031      	b.n	8003a38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039da:	d025      	beq.n	8003a28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039dc:	f7fd fe62 	bl	80016a4 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d302      	bcc.n	80039f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d11a      	bne.n	8003a28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d013      	beq.n	8003a28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a04:	f043 0220 	orr.w	r2, r3, #32
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e007      	b.n	8003a38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d1c4      	bne.n	80039c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a4c:	e02f      	b.n	8003aae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f8c4 	bl	8003be0 <I2C_IsErrorOccurred>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e02d      	b.n	8003abe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a62:	f7fd fe1f 	bl	80016a4 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d302      	bcc.n	8003a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d11a      	bne.n	8003aae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d013      	beq.n	8003aae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8a:	f043 0220 	orr.w	r2, r3, #32
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e007      	b.n	8003abe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d1c8      	bne.n	8003a4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003ad8:	e071      	b.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f87e 	bl	8003be0 <I2C_IsErrorOccurred>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d13b      	bne.n	8003b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d138      	bne.n	8003b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d105      	bne.n	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d121      	bne.n	8003b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2210      	movs	r2, #16
 8003b30:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2204      	movs	r2, #4
 8003b36:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6859      	ldr	r1, [r3, #4]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	4b24      	ldr	r3, [pc, #144]	@ (8003bdc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003b4c:	400b      	ands	r3, r1
 8003b4e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	75fb      	strb	r3, [r7, #23]
 8003b6c:	e002      	b.n	8003b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003b74:	f7fd fd96 	bl	80016a4 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d119      	bne.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d116      	bne.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d00f      	beq.n	8003bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba2:	f043 0220 	orr.w	r2, r3, #32
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d002      	beq.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d083      	beq.n	8003ada <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	fe00e800 	.word	0xfe00e800

08003be0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	@ 0x28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d068      	beq.n	8003cde <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2210      	movs	r2, #16
 8003c12:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c14:	e049      	b.n	8003caa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c1c:	d045      	beq.n	8003caa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c1e:	f7fd fd41 	bl	80016a4 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d302      	bcc.n	8003c34 <I2C_IsErrorOccurred+0x54>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d13a      	bne.n	8003caa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c46:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c56:	d121      	bne.n	8003c9c <I2C_IsErrorOccurred+0xbc>
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c5e:	d01d      	beq.n	8003c9c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d01a      	beq.n	8003c9c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c74:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c76:	f7fd fd15 	bl	80016a4 <HAL_GetTick>
 8003c7a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c7c:	e00e      	b.n	8003c9c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c7e:	f7fd fd11 	bl	80016a4 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b19      	cmp	r3, #25
 8003c8a:	d907      	bls.n	8003c9c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	f043 0320 	orr.w	r3, r3, #32
 8003c92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003c9a:	e006      	b.n	8003caa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d1e9      	bne.n	8003c7e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d003      	beq.n	8003cc0 <I2C_IsErrorOccurred+0xe0>
 8003cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0aa      	beq.n	8003c16 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d103      	bne.n	8003cd0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	f043 0304 	orr.w	r3, r3, #4
 8003cd6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f043 0308 	orr.w	r3, r3, #8
 8003d18:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00b      	beq.n	8003d4c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	f043 0302 	orr.w	r3, r3, #2
 8003d3a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01c      	beq.n	8003d8e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f7ff fdaf 	bl	80038b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6859      	ldr	r1, [r3, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4b0d      	ldr	r3, [pc, #52]	@ (8003d9c <I2C_IsErrorOccurred+0x1bc>)
 8003d66:	400b      	ands	r3, r1
 8003d68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3728      	adds	r7, #40	@ 0x28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	fe00e800 	.word	0xfe00e800

08003da0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	460b      	mov	r3, r1
 8003dac:	817b      	strh	r3, [r7, #10]
 8003dae:	4613      	mov	r3, r2
 8003db0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003db2:	897b      	ldrh	r3, [r7, #10]
 8003db4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003db8:	7a7b      	ldrb	r3, [r7, #9]
 8003dba:	041b      	lsls	r3, r3, #16
 8003dbc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dc0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003dce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	0d5b      	lsrs	r3, r3, #21
 8003dda:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003dde:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <I2C_TransferConfig+0x60>)
 8003de0:	430b      	orrs	r3, r1
 8003de2:	43db      	mvns	r3, r3
 8003de4:	ea02 0103 	and.w	r1, r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	03ff63ff 	.word	0x03ff63ff

08003e04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d138      	bne.n	8003e8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e032      	b.n	8003e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2224      	movs	r2, #36	@ 0x24
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6819      	ldr	r1, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e000      	b.n	8003e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d139      	bne.n	8003f24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e033      	b.n	8003f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2224      	movs	r2, #36	@ 0x24
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0201 	bic.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003eec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e000      	b.n	8003f26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
  }
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f38:	4b04      	ldr	r3, [pc, #16]	@ (8003f4c <HAL_PWREx_GetVoltageRange+0x18>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40007000 	.word	0x40007000

08003f50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f5e:	d130      	bne.n	8003fc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f60:	4b23      	ldr	r3, [pc, #140]	@ (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f6c:	d038      	beq.n	8003fe0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f6e:	4b20      	ldr	r3, [pc, #128]	@ (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f76:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2232      	movs	r2, #50	@ 0x32
 8003f84:	fb02 f303 	mul.w	r3, r2, r3
 8003f88:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	0c9b      	lsrs	r3, r3, #18
 8003f90:	3301      	adds	r3, #1
 8003f92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f94:	e002      	b.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f9c:	4b14      	ldr	r3, [pc, #80]	@ (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fa8:	d102      	bne.n	8003fb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f2      	bne.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fbc:	d110      	bne.n	8003fe0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e00f      	b.n	8003fe2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fce:	d007      	beq.n	8003fe0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fd0:	4b07      	ldr	r3, [pc, #28]	@ (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fd8:	4a05      	ldr	r2, [pc, #20]	@ (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	20000000 	.word	0x20000000
 8003ff8:	431bde83 	.word	0x431bde83

08003ffc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f000 bc02 	b.w	8004814 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004010:	4b96      	ldr	r3, [pc, #600]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 030c 	and.w	r3, r3, #12
 8004018:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800401a:	4b94      	ldr	r3, [pc, #592]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80e4 	beq.w	80041fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d007      	beq.n	8004048 <HAL_RCC_OscConfig+0x4c>
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b0c      	cmp	r3, #12
 800403c:	f040 808b 	bne.w	8004156 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2b01      	cmp	r3, #1
 8004044:	f040 8087 	bne.w	8004156 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004048:	4b88      	ldr	r3, [pc, #544]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_OscConfig+0x64>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e3d9      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1a      	ldr	r2, [r3, #32]
 8004064:	4b81      	ldr	r3, [pc, #516]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d004      	beq.n	800407a <HAL_RCC_OscConfig+0x7e>
 8004070:	4b7e      	ldr	r3, [pc, #504]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004078:	e005      	b.n	8004086 <HAL_RCC_OscConfig+0x8a>
 800407a:	4b7c      	ldr	r3, [pc, #496]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 800407c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004080:	091b      	lsrs	r3, r3, #4
 8004082:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004086:	4293      	cmp	r3, r2
 8004088:	d223      	bcs.n	80040d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fd54 	bl	8004b3c <RCC_SetFlashLatencyFromMSIRange>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e3ba      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800409e:	4b73      	ldr	r3, [pc, #460]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a72      	ldr	r2, [pc, #456]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80040a4:	f043 0308 	orr.w	r3, r3, #8
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4b70      	ldr	r3, [pc, #448]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	496d      	ldr	r1, [pc, #436]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040bc:	4b6b      	ldr	r3, [pc, #428]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	4968      	ldr	r1, [pc, #416]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
 80040d0:	e025      	b.n	800411e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040d2:	4b66      	ldr	r3, [pc, #408]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a65      	ldr	r2, [pc, #404]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80040d8:	f043 0308 	orr.w	r3, r3, #8
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	4b63      	ldr	r3, [pc, #396]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	4960      	ldr	r1, [pc, #384]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040f0:	4b5e      	ldr	r3, [pc, #376]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	495b      	ldr	r1, [pc, #364]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fd14 	bl	8004b3c <RCC_SetFlashLatencyFromMSIRange>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e37a      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800411e:	f000 fc81 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 8004122:	4602      	mov	r2, r0
 8004124:	4b51      	ldr	r3, [pc, #324]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	4950      	ldr	r1, [pc, #320]	@ (8004270 <HAL_RCC_OscConfig+0x274>)
 8004130:	5ccb      	ldrb	r3, [r1, r3]
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	fa22 f303 	lsr.w	r3, r2, r3
 800413a:	4a4e      	ldr	r2, [pc, #312]	@ (8004274 <HAL_RCC_OscConfig+0x278>)
 800413c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800413e:	4b4e      	ldr	r3, [pc, #312]	@ (8004278 <HAL_RCC_OscConfig+0x27c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd fa5e 	bl	8001604 <HAL_InitTick>
 8004148:	4603      	mov	r3, r0
 800414a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d052      	beq.n	80041f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	e35e      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d032      	beq.n	80041c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800415e:	4b43      	ldr	r3, [pc, #268]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a42      	ldr	r2, [pc, #264]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800416a:	f7fd fa9b 	bl	80016a4 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004172:	f7fd fa97 	bl	80016a4 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e347      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004184:	4b39      	ldr	r3, [pc, #228]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004190:	4b36      	ldr	r3, [pc, #216]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a35      	ldr	r2, [pc, #212]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 8004196:	f043 0308 	orr.w	r3, r3, #8
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	4b33      	ldr	r3, [pc, #204]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	4930      	ldr	r1, [pc, #192]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ae:	4b2f      	ldr	r3, [pc, #188]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	492b      	ldr	r1, [pc, #172]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	604b      	str	r3, [r1, #4]
 80041c2:	e01a      	b.n	80041fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041c4:	4b29      	ldr	r3, [pc, #164]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a28      	ldr	r2, [pc, #160]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80041ca:	f023 0301 	bic.w	r3, r3, #1
 80041ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041d0:	f7fd fa68 	bl	80016a4 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041d8:	f7fd fa64 	bl	80016a4 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e314      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041ea:	4b20      	ldr	r3, [pc, #128]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x1dc>
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d073      	beq.n	80042ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d005      	beq.n	8004218 <HAL_RCC_OscConfig+0x21c>
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b0c      	cmp	r3, #12
 8004210:	d10e      	bne.n	8004230 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	2b03      	cmp	r3, #3
 8004216:	d10b      	bne.n	8004230 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004218:	4b14      	ldr	r3, [pc, #80]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d063      	beq.n	80042ec <HAL_RCC_OscConfig+0x2f0>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d15f      	bne.n	80042ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e2f1      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004238:	d106      	bne.n	8004248 <HAL_RCC_OscConfig+0x24c>
 800423a:	4b0c      	ldr	r3, [pc, #48]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a0b      	ldr	r2, [pc, #44]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 8004240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e025      	b.n	8004294 <HAL_RCC_OscConfig+0x298>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004250:	d114      	bne.n	800427c <HAL_RCC_OscConfig+0x280>
 8004252:	4b06      	ldr	r3, [pc, #24]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a05      	ldr	r2, [pc, #20]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 8004258:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	4b03      	ldr	r3, [pc, #12]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a02      	ldr	r2, [pc, #8]	@ (800426c <HAL_RCC_OscConfig+0x270>)
 8004264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	e013      	b.n	8004294 <HAL_RCC_OscConfig+0x298>
 800426c:	40021000 	.word	0x40021000
 8004270:	0800622c 	.word	0x0800622c
 8004274:	20000000 	.word	0x20000000
 8004278:	20000004 	.word	0x20000004
 800427c:	4ba0      	ldr	r3, [pc, #640]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a9f      	ldr	r2, [pc, #636]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 8004282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	4b9d      	ldr	r3, [pc, #628]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a9c      	ldr	r2, [pc, #624]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 800428e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d013      	beq.n	80042c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fd fa02 	bl	80016a4 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a4:	f7fd f9fe 	bl	80016a4 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	@ 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e2ae      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042b6:	4b92      	ldr	r3, [pc, #584]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x2a8>
 80042c2:	e014      	b.n	80042ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fd f9ee 	bl	80016a4 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042cc:	f7fd f9ea 	bl	80016a4 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	@ 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e29a      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042de:	4b88      	ldr	r3, [pc, #544]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x2d0>
 80042ea:	e000      	b.n	80042ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d060      	beq.n	80043bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d005      	beq.n	800430c <HAL_RCC_OscConfig+0x310>
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2b0c      	cmp	r3, #12
 8004304:	d119      	bne.n	800433a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d116      	bne.n	800433a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800430c:	4b7c      	ldr	r3, [pc, #496]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_RCC_OscConfig+0x328>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e277      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004324:	4b76      	ldr	r3, [pc, #472]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	061b      	lsls	r3, r3, #24
 8004332:	4973      	ldr	r1, [pc, #460]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 8004334:	4313      	orrs	r3, r2
 8004336:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004338:	e040      	b.n	80043bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d023      	beq.n	800438a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004342:	4b6f      	ldr	r3, [pc, #444]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a6e      	ldr	r2, [pc, #440]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 8004348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800434c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7fd f9a9 	bl	80016a4 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004356:	f7fd f9a5 	bl	80016a4 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e255      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004368:	4b65      	ldr	r3, [pc, #404]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	4b62      	ldr	r3, [pc, #392]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	061b      	lsls	r3, r3, #24
 8004382:	495f      	ldr	r1, [pc, #380]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 8004384:	4313      	orrs	r3, r2
 8004386:	604b      	str	r3, [r1, #4]
 8004388:	e018      	b.n	80043bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438a:	4b5d      	ldr	r3, [pc, #372]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a5c      	ldr	r2, [pc, #368]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 8004390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004396:	f7fd f985 	bl	80016a4 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439e:	f7fd f981 	bl	80016a4 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e231      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043b0:	4b53      	ldr	r3, [pc, #332]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f0      	bne.n	800439e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d03c      	beq.n	8004442 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01c      	beq.n	800440a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 80043d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043d6:	4a4a      	ldr	r2, [pc, #296]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e0:	f7fd f960 	bl	80016a4 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e8:	f7fd f95c 	bl	80016a4 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e20c      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043fa:	4b41      	ldr	r3, [pc, #260]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 80043fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ef      	beq.n	80043e8 <HAL_RCC_OscConfig+0x3ec>
 8004408:	e01b      	b.n	8004442 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800440a:	4b3d      	ldr	r3, [pc, #244]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 800440c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004410:	4a3b      	ldr	r2, [pc, #236]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800441a:	f7fd f943 	bl	80016a4 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004422:	f7fd f93f 	bl	80016a4 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e1ef      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004434:	4b32      	ldr	r3, [pc, #200]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 8004436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1ef      	bne.n	8004422 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80a6 	beq.w	800459c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004450:	2300      	movs	r3, #0
 8004452:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004454:	4b2a      	ldr	r3, [pc, #168]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10d      	bne.n	800447c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004460:	4b27      	ldr	r3, [pc, #156]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004464:	4a26      	ldr	r2, [pc, #152]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800446a:	6593      	str	r3, [r2, #88]	@ 0x58
 800446c:	4b24      	ldr	r3, [pc, #144]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 800446e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004478:	2301      	movs	r3, #1
 800447a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800447c:	4b21      	ldr	r3, [pc, #132]	@ (8004504 <HAL_RCC_OscConfig+0x508>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d118      	bne.n	80044ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004488:	4b1e      	ldr	r3, [pc, #120]	@ (8004504 <HAL_RCC_OscConfig+0x508>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1d      	ldr	r2, [pc, #116]	@ (8004504 <HAL_RCC_OscConfig+0x508>)
 800448e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004492:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004494:	f7fd f906 	bl	80016a4 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449c:	f7fd f902 	bl	80016a4 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e1b2      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ae:	4b15      	ldr	r3, [pc, #84]	@ (8004504 <HAL_RCC_OscConfig+0x508>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d108      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4d8>
 80044c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044d2:	e029      	b.n	8004528 <HAL_RCC_OscConfig+0x52c>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b05      	cmp	r3, #5
 80044da:	d115      	bne.n	8004508 <HAL_RCC_OscConfig+0x50c>
 80044dc:	4b08      	ldr	r3, [pc, #32]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e2:	4a07      	ldr	r2, [pc, #28]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 80044e4:	f043 0304 	orr.w	r3, r3, #4
 80044e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044ec:	4b04      	ldr	r3, [pc, #16]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f2:	4a03      	ldr	r2, [pc, #12]	@ (8004500 <HAL_RCC_OscConfig+0x504>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044fc:	e014      	b.n	8004528 <HAL_RCC_OscConfig+0x52c>
 80044fe:	bf00      	nop
 8004500:	40021000 	.word	0x40021000
 8004504:	40007000 	.word	0x40007000
 8004508:	4b9a      	ldr	r3, [pc, #616]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 800450a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450e:	4a99      	ldr	r2, [pc, #612]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 8004510:	f023 0301 	bic.w	r3, r3, #1
 8004514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004518:	4b96      	ldr	r3, [pc, #600]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451e:	4a95      	ldr	r2, [pc, #596]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 8004520:	f023 0304 	bic.w	r3, r3, #4
 8004524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d016      	beq.n	800455e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004530:	f7fd f8b8 	bl	80016a4 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004536:	e00a      	b.n	800454e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004538:	f7fd f8b4 	bl	80016a4 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e162      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454e:	4b89      	ldr	r3, [pc, #548]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0ed      	beq.n	8004538 <HAL_RCC_OscConfig+0x53c>
 800455c:	e015      	b.n	800458a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455e:	f7fd f8a1 	bl	80016a4 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004564:	e00a      	b.n	800457c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004566:	f7fd f89d 	bl	80016a4 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004574:	4293      	cmp	r3, r2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e14b      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800457c:	4b7d      	ldr	r3, [pc, #500]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1ed      	bne.n	8004566 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800458a:	7ffb      	ldrb	r3, [r7, #31]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004590:	4b78      	ldr	r3, [pc, #480]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 8004592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004594:	4a77      	ldr	r2, [pc, #476]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 8004596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800459a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d03c      	beq.n	8004622 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01c      	beq.n	80045ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045b0:	4b70      	ldr	r3, [pc, #448]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 80045b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045b6:	4a6f      	ldr	r2, [pc, #444]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c0:	f7fd f870 	bl	80016a4 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c8:	f7fd f86c 	bl	80016a4 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e11c      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045da:	4b66      	ldr	r3, [pc, #408]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 80045dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0ef      	beq.n	80045c8 <HAL_RCC_OscConfig+0x5cc>
 80045e8:	e01b      	b.n	8004622 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045ea:	4b62      	ldr	r3, [pc, #392]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 80045ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045f0:	4a60      	ldr	r2, [pc, #384]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fa:	f7fd f853 	bl	80016a4 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004602:	f7fd f84f 	bl	80016a4 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0ff      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004614:	4b57      	ldr	r3, [pc, #348]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 8004616:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1ef      	bne.n	8004602 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 80f3 	beq.w	8004812 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004630:	2b02      	cmp	r3, #2
 8004632:	f040 80c9 	bne.w	80047c8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004636:	4b4f      	ldr	r3, [pc, #316]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f003 0203 	and.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004646:	429a      	cmp	r2, r3
 8004648:	d12c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004654:	3b01      	subs	r3, #1
 8004656:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004658:	429a      	cmp	r2, r3
 800465a:	d123      	bne.n	80046a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004666:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004668:	429a      	cmp	r2, r3
 800466a:	d11b      	bne.n	80046a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004676:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004678:	429a      	cmp	r2, r3
 800467a:	d113      	bne.n	80046a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004686:	085b      	lsrs	r3, r3, #1
 8004688:	3b01      	subs	r3, #1
 800468a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800468c:	429a      	cmp	r2, r3
 800468e:	d109      	bne.n	80046a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	085b      	lsrs	r3, r3, #1
 800469c:	3b01      	subs	r3, #1
 800469e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d06b      	beq.n	800477c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	d062      	beq.n	8004770 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046aa:	4b32      	ldr	r3, [pc, #200]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e0ac      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a2d      	ldr	r2, [pc, #180]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 80046c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046c6:	f7fc ffed 	bl	80016a4 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ce:	f7fc ffe9 	bl	80016a4 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e099      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e0:	4b24      	ldr	r3, [pc, #144]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f0      	bne.n	80046ce <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ec:	4b21      	ldr	r3, [pc, #132]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	4b21      	ldr	r3, [pc, #132]	@ (8004778 <HAL_RCC_OscConfig+0x77c>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80046fc:	3a01      	subs	r2, #1
 80046fe:	0112      	lsls	r2, r2, #4
 8004700:	4311      	orrs	r1, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004706:	0212      	lsls	r2, r2, #8
 8004708:	4311      	orrs	r1, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800470e:	0852      	lsrs	r2, r2, #1
 8004710:	3a01      	subs	r2, #1
 8004712:	0552      	lsls	r2, r2, #21
 8004714:	4311      	orrs	r1, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800471a:	0852      	lsrs	r2, r2, #1
 800471c:	3a01      	subs	r2, #1
 800471e:	0652      	lsls	r2, r2, #25
 8004720:	4311      	orrs	r1, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004726:	06d2      	lsls	r2, r2, #27
 8004728:	430a      	orrs	r2, r1
 800472a:	4912      	ldr	r1, [pc, #72]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 800472c:	4313      	orrs	r3, r2
 800472e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004730:	4b10      	ldr	r3, [pc, #64]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a0f      	ldr	r2, [pc, #60]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 8004736:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800473a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800473c:	4b0d      	ldr	r3, [pc, #52]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4a0c      	ldr	r2, [pc, #48]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 8004742:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004746:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004748:	f7fc ffac 	bl	80016a4 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004750:	f7fc ffa8 	bl	80016a4 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e058      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004762:	4b04      	ldr	r3, [pc, #16]	@ (8004774 <HAL_RCC_OscConfig+0x778>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800476e:	e050      	b.n	8004812 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e04f      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
 8004774:	40021000 	.word	0x40021000
 8004778:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800477c:	4b27      	ldr	r3, [pc, #156]	@ (800481c <HAL_RCC_OscConfig+0x820>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d144      	bne.n	8004812 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004788:	4b24      	ldr	r3, [pc, #144]	@ (800481c <HAL_RCC_OscConfig+0x820>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a23      	ldr	r2, [pc, #140]	@ (800481c <HAL_RCC_OscConfig+0x820>)
 800478e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004792:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004794:	4b21      	ldr	r3, [pc, #132]	@ (800481c <HAL_RCC_OscConfig+0x820>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4a20      	ldr	r2, [pc, #128]	@ (800481c <HAL_RCC_OscConfig+0x820>)
 800479a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800479e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047a0:	f7fc ff80 	bl	80016a4 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fc ff7c 	bl	80016a4 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e02c      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ba:	4b18      	ldr	r3, [pc, #96]	@ (800481c <HAL_RCC_OscConfig+0x820>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0x7ac>
 80047c6:	e024      	b.n	8004812 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	d01f      	beq.n	800480e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ce:	4b13      	ldr	r3, [pc, #76]	@ (800481c <HAL_RCC_OscConfig+0x820>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a12      	ldr	r2, [pc, #72]	@ (800481c <HAL_RCC_OscConfig+0x820>)
 80047d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047da:	f7fc ff63 	bl	80016a4 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e2:	f7fc ff5f 	bl	80016a4 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e00f      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f4:	4b09      	ldr	r3, [pc, #36]	@ (800481c <HAL_RCC_OscConfig+0x820>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f0      	bne.n	80047e2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004800:	4b06      	ldr	r3, [pc, #24]	@ (800481c <HAL_RCC_OscConfig+0x820>)
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	4905      	ldr	r1, [pc, #20]	@ (800481c <HAL_RCC_OscConfig+0x820>)
 8004806:	4b06      	ldr	r3, [pc, #24]	@ (8004820 <HAL_RCC_OscConfig+0x824>)
 8004808:	4013      	ands	r3, r2
 800480a:	60cb      	str	r3, [r1, #12]
 800480c:	e001      	b.n	8004812 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3720      	adds	r7, #32
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40021000 	.word	0x40021000
 8004820:	feeefffc 	.word	0xfeeefffc

08004824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0e7      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004838:	4b75      	ldr	r3, [pc, #468]	@ (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d910      	bls.n	8004868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b72      	ldr	r3, [pc, #456]	@ (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 0207 	bic.w	r2, r3, #7
 800484e:	4970      	ldr	r1, [pc, #448]	@ (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b6e      	ldr	r3, [pc, #440]	@ (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0cf      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d010      	beq.n	8004896 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	4b66      	ldr	r3, [pc, #408]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004880:	429a      	cmp	r2, r3
 8004882:	d908      	bls.n	8004896 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004884:	4b63      	ldr	r3, [pc, #396]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	4960      	ldr	r1, [pc, #384]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 8004892:	4313      	orrs	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d04c      	beq.n	800493c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d107      	bne.n	80048ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048aa:	4b5a      	ldr	r3, [pc, #360]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d121      	bne.n	80048fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e0a6      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048c2:	4b54      	ldr	r3, [pc, #336]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d115      	bne.n	80048fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e09a      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d107      	bne.n	80048ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048da:	4b4e      	ldr	r3, [pc, #312]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e08e      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e086      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048fa:	4b46      	ldr	r3, [pc, #280]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f023 0203 	bic.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4943      	ldr	r1, [pc, #268]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 8004908:	4313      	orrs	r3, r2
 800490a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800490c:	f7fc feca 	bl	80016a4 <HAL_GetTick>
 8004910:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	e00a      	b.n	800492a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004914:	f7fc fec6 	bl	80016a4 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e06e      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492a:	4b3a      	ldr	r3, [pc, #232]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 020c 	and.w	r2, r3, #12
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	429a      	cmp	r2, r3
 800493a:	d1eb      	bne.n	8004914 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d010      	beq.n	800496a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	4b31      	ldr	r3, [pc, #196]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004954:	429a      	cmp	r2, r3
 8004956:	d208      	bcs.n	800496a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004958:	4b2e      	ldr	r3, [pc, #184]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	492b      	ldr	r1, [pc, #172]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800496a:	4b29      	ldr	r3, [pc, #164]	@ (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d210      	bcs.n	800499a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004978:	4b25      	ldr	r3, [pc, #148]	@ (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f023 0207 	bic.w	r2, r3, #7
 8004980:	4923      	ldr	r1, [pc, #140]	@ (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	4313      	orrs	r3, r2
 8004986:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004988:	4b21      	ldr	r3, [pc, #132]	@ (8004a10 <HAL_RCC_ClockConfig+0x1ec>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d001      	beq.n	800499a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e036      	b.n	8004a08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	4918      	ldr	r1, [pc, #96]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d009      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049c4:	4b13      	ldr	r3, [pc, #76]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	4910      	ldr	r1, [pc, #64]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049d8:	f000 f824 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b0d      	ldr	r3, [pc, #52]	@ (8004a14 <HAL_RCC_ClockConfig+0x1f0>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	091b      	lsrs	r3, r3, #4
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	490b      	ldr	r1, [pc, #44]	@ (8004a18 <HAL_RCC_ClockConfig+0x1f4>)
 80049ea:	5ccb      	ldrb	r3, [r1, r3]
 80049ec:	f003 031f 	and.w	r3, r3, #31
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
 80049f4:	4a09      	ldr	r2, [pc, #36]	@ (8004a1c <HAL_RCC_ClockConfig+0x1f8>)
 80049f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049f8:	4b09      	ldr	r3, [pc, #36]	@ (8004a20 <HAL_RCC_ClockConfig+0x1fc>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fc fe01 	bl	8001604 <HAL_InitTick>
 8004a02:	4603      	mov	r3, r0
 8004a04:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a06:	7afb      	ldrb	r3, [r7, #11]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40022000 	.word	0x40022000
 8004a14:	40021000 	.word	0x40021000
 8004a18:	0800622c 	.word	0x0800622c
 8004a1c:	20000000 	.word	0x20000000
 8004a20:	20000004 	.word	0x20000004

08004a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b089      	sub	sp, #36	@ 0x24
 8004a28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a32:	4b3e      	ldr	r3, [pc, #248]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
 8004a3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0x34>
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d121      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d11e      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a58:	4b34      	ldr	r3, [pc, #208]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d107      	bne.n	8004a74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a64:	4b31      	ldr	r3, [pc, #196]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a6a:	0a1b      	lsrs	r3, r3, #8
 8004a6c:	f003 030f 	and.w	r3, r3, #15
 8004a70:	61fb      	str	r3, [r7, #28]
 8004a72:	e005      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a74:	4b2d      	ldr	r3, [pc, #180]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a80:	4a2b      	ldr	r2, [pc, #172]	@ (8004b30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10d      	bne.n	8004aac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a94:	e00a      	b.n	8004aac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d102      	bne.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a9c:	4b25      	ldr	r3, [pc, #148]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a9e:	61bb      	str	r3, [r7, #24]
 8004aa0:	e004      	b.n	8004aac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d101      	bne.n	8004aac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004aa8:	4b23      	ldr	r3, [pc, #140]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x114>)
 8004aaa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	2b0c      	cmp	r3, #12
 8004ab0:	d134      	bne.n	8004b1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d003      	beq.n	8004aca <HAL_RCC_GetSysClockFreq+0xa6>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d003      	beq.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xac>
 8004ac8:	e005      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004aca:	4b1a      	ldr	r3, [pc, #104]	@ (8004b34 <HAL_RCC_GetSysClockFreq+0x110>)
 8004acc:	617b      	str	r3, [r7, #20]
      break;
 8004ace:	e005      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ad0:	4b19      	ldr	r3, [pc, #100]	@ (8004b38 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ad2:	617b      	str	r3, [r7, #20]
      break;
 8004ad4:	e002      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	617b      	str	r3, [r7, #20]
      break;
 8004ada:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004adc:	4b13      	ldr	r3, [pc, #76]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	091b      	lsrs	r3, r3, #4
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004aea:	4b10      	ldr	r3, [pc, #64]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	0a1b      	lsrs	r3, r3, #8
 8004af0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	fb03 f202 	mul.w	r2, r3, r2
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b02:	4b0a      	ldr	r3, [pc, #40]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	0e5b      	lsrs	r3, r3, #25
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b1c:	69bb      	ldr	r3, [r7, #24]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3724      	adds	r7, #36	@ 0x24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	0800623c 	.word	0x0800623c
 8004b34:	00f42400 	.word	0x00f42400
 8004b38:	007a1200 	.word	0x007a1200

08004b3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b44:	2300      	movs	r3, #0
 8004b46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b48:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b54:	f7ff f9ee 	bl	8003f34 <HAL_PWREx_GetVoltageRange>
 8004b58:	6178      	str	r0, [r7, #20]
 8004b5a:	e014      	b.n	8004b86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b5c:	4b25      	ldr	r3, [pc, #148]	@ (8004bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b60:	4a24      	ldr	r2, [pc, #144]	@ (8004bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b68:	4b22      	ldr	r3, [pc, #136]	@ (8004bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b74:	f7ff f9de 	bl	8003f34 <HAL_PWREx_GetVoltageRange>
 8004b78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b84:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b8c:	d10b      	bne.n	8004ba6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b80      	cmp	r3, #128	@ 0x80
 8004b92:	d919      	bls.n	8004bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b98:	d902      	bls.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	e013      	b.n	8004bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	e010      	b.n	8004bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b80      	cmp	r3, #128	@ 0x80
 8004baa:	d902      	bls.n	8004bb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004bac:	2303      	movs	r3, #3
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	e00a      	b.n	8004bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b80      	cmp	r3, #128	@ 0x80
 8004bb6:	d102      	bne.n	8004bbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bb8:	2302      	movs	r3, #2
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	e004      	b.n	8004bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b70      	cmp	r3, #112	@ 0x70
 8004bc2:	d101      	bne.n	8004bc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f023 0207 	bic.w	r2, r3, #7
 8004bd0:	4909      	ldr	r1, [pc, #36]	@ (8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004bd8:	4b07      	ldr	r3, [pc, #28]	@ (8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d001      	beq.n	8004bea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	40022000 	.word	0x40022000

08004bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c04:	2300      	movs	r3, #0
 8004c06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c08:	2300      	movs	r3, #0
 8004c0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d031      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c20:	d01a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004c22:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c26:	d814      	bhi.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d009      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c30:	d10f      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004c32:	4b5d      	ldr	r3, [pc, #372]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	4a5c      	ldr	r2, [pc, #368]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c3c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c3e:	e00c      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	2100      	movs	r1, #0
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 f9f0 	bl	800502c <RCCEx_PLLSAI1_Config>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c50:	e003      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	74fb      	strb	r3, [r7, #19]
      break;
 8004c56:	e000      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004c58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c5a:	7cfb      	ldrb	r3, [r7, #19]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10b      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c60:	4b51      	ldr	r3, [pc, #324]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6e:	494e      	ldr	r1, [pc, #312]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004c76:	e001      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c78:	7cfb      	ldrb	r3, [r7, #19]
 8004c7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 809e 	beq.w	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c8e:	4b46      	ldr	r3, [pc, #280]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00d      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ca4:	4b40      	ldr	r3, [pc, #256]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca8:	4a3f      	ldr	r2, [pc, #252]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cae:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cb0:	4b3d      	ldr	r3, [pc, #244]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a39      	ldr	r2, [pc, #228]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ccc:	f7fc fcea 	bl	80016a4 <HAL_GetTick>
 8004cd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cd2:	e009      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd4:	f7fc fce6 	bl	80016a4 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d902      	bls.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	74fb      	strb	r3, [r7, #19]
        break;
 8004ce6:	e005      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ce8:	4b30      	ldr	r3, [pc, #192]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0ef      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004cf4:	7cfb      	ldrb	r3, [r7, #19]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d15a      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cfa:	4b2b      	ldr	r3, [pc, #172]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01e      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d019      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d16:	4b24      	ldr	r3, [pc, #144]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d22:	4b21      	ldr	r3, [pc, #132]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d28:	4a1f      	ldr	r2, [pc, #124]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d32:	4b1d      	ldr	r3, [pc, #116]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d38:	4a1b      	ldr	r2, [pc, #108]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d42:	4a19      	ldr	r2, [pc, #100]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d016      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fc fca6 	bl	80016a4 <HAL_GetTick>
 8004d58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5c:	f7fc fca2 	bl	80016a4 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d902      	bls.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	74fb      	strb	r3, [r7, #19]
            break;
 8004d72:	e006      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d74:	4b0c      	ldr	r3, [pc, #48]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0ec      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004d82:	7cfb      	ldrb	r3, [r7, #19]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10b      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d88:	4b07      	ldr	r3, [pc, #28]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d96:	4904      	ldr	r1, [pc, #16]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d9e:	e009      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	74bb      	strb	r3, [r7, #18]
 8004da4:	e006      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004da6:	bf00      	nop
 8004da8:	40021000 	.word	0x40021000
 8004dac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db0:	7cfb      	ldrb	r3, [r7, #19]
 8004db2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004db4:	7c7b      	ldrb	r3, [r7, #17]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d105      	bne.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dba:	4b9b      	ldr	r3, [pc, #620]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dbe:	4a9a      	ldr	r2, [pc, #616]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004dc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dc4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dd2:	4b95      	ldr	r3, [pc, #596]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd8:	f023 0203 	bic.w	r2, r3, #3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	4991      	ldr	r1, [pc, #580]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004df4:	4b8c      	ldr	r3, [pc, #560]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfa:	f023 020c 	bic.w	r2, r3, #12
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	4989      	ldr	r1, [pc, #548]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e16:	4b84      	ldr	r3, [pc, #528]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e24:	4980      	ldr	r1, [pc, #512]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e38:	4b7b      	ldr	r3, [pc, #492]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e46:	4978      	ldr	r1, [pc, #480]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e5a:	4b73      	ldr	r3, [pc, #460]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e68:	496f      	ldr	r1, [pc, #444]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	4967      	ldr	r1, [pc, #412]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e9e:	4b62      	ldr	r3, [pc, #392]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eac:	495e      	ldr	r1, [pc, #376]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ec0:	4b59      	ldr	r3, [pc, #356]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ece:	4956      	ldr	r1, [pc, #344]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ee2:	4b51      	ldr	r3, [pc, #324]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef0:	494d      	ldr	r1, [pc, #308]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d028      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f04:	4b48      	ldr	r3, [pc, #288]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f12:	4945      	ldr	r1, [pc, #276]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f22:	d106      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f24:	4b40      	ldr	r3, [pc, #256]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	4a3f      	ldr	r2, [pc, #252]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f2e:	60d3      	str	r3, [r2, #12]
 8004f30:	e011      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f3a:	d10c      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	2101      	movs	r1, #1
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 f872 	bl	800502c <RCCEx_PLLSAI1_Config>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f4c:	7cfb      	ldrb	r3, [r7, #19]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004f52:	7cfb      	ldrb	r3, [r7, #19]
 8004f54:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d028      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f62:	4b31      	ldr	r3, [pc, #196]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f70:	492d      	ldr	r1, [pc, #180]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f80:	d106      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f82:	4b29      	ldr	r3, [pc, #164]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	4a28      	ldr	r2, [pc, #160]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f8c:	60d3      	str	r3, [r2, #12]
 8004f8e:	e011      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 f843 	bl	800502c <RCCEx_PLLSAI1_Config>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004faa:	7cfb      	ldrb	r3, [r7, #19]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01c      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fc0:	4b19      	ldr	r3, [pc, #100]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fce:	4916      	ldr	r1, [pc, #88]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fde:	d10c      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 f820 	bl	800502c <RCCEx_PLLSAI1_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ff0:	7cfb      	ldrb	r3, [r7, #19]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004ff6:	7cfb      	ldrb	r3, [r7, #19]
 8004ff8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005006:	4b08      	ldr	r3, [pc, #32]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005014:	4904      	ldr	r1, [pc, #16]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800501c:	7cbb      	ldrb	r3, [r7, #18]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40021000 	.word	0x40021000

0800502c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800503a:	4b74      	ldr	r3, [pc, #464]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d018      	beq.n	8005078 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005046:	4b71      	ldr	r3, [pc, #452]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0203 	and.w	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d10d      	bne.n	8005072 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
       ||
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800505e:	4b6b      	ldr	r3, [pc, #428]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	091b      	lsrs	r3, r3, #4
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
       ||
 800506e:	429a      	cmp	r2, r3
 8005070:	d047      	beq.n	8005102 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
 8005076:	e044      	b.n	8005102 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d018      	beq.n	80050b2 <RCCEx_PLLSAI1_Config+0x86>
 8005080:	2b03      	cmp	r3, #3
 8005082:	d825      	bhi.n	80050d0 <RCCEx_PLLSAI1_Config+0xa4>
 8005084:	2b01      	cmp	r3, #1
 8005086:	d002      	beq.n	800508e <RCCEx_PLLSAI1_Config+0x62>
 8005088:	2b02      	cmp	r3, #2
 800508a:	d009      	beq.n	80050a0 <RCCEx_PLLSAI1_Config+0x74>
 800508c:	e020      	b.n	80050d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800508e:	4b5f      	ldr	r3, [pc, #380]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d11d      	bne.n	80050d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800509e:	e01a      	b.n	80050d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050a0:	4b5a      	ldr	r3, [pc, #360]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d116      	bne.n	80050da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b0:	e013      	b.n	80050da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050b2:	4b56      	ldr	r3, [pc, #344]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050be:	4b53      	ldr	r3, [pc, #332]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050ce:	e006      	b.n	80050de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
      break;
 80050d4:	e004      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050d6:	bf00      	nop
 80050d8:	e002      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050da:	bf00      	nop
 80050dc:	e000      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050de:	bf00      	nop
    }

    if(status == HAL_OK)
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10d      	bne.n	8005102 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050e6:	4b49      	ldr	r3, [pc, #292]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6819      	ldr	r1, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	430b      	orrs	r3, r1
 80050fc:	4943      	ldr	r1, [pc, #268]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d17c      	bne.n	8005202 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005108:	4b40      	ldr	r3, [pc, #256]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a3f      	ldr	r2, [pc, #252]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 800510e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005114:	f7fc fac6 	bl	80016a4 <HAL_GetTick>
 8005118:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800511a:	e009      	b.n	8005130 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800511c:	f7fc fac2 	bl	80016a4 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d902      	bls.n	8005130 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	73fb      	strb	r3, [r7, #15]
        break;
 800512e:	e005      	b.n	800513c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005130:	4b36      	ldr	r3, [pc, #216]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1ef      	bne.n	800511c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d15f      	bne.n	8005202 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d110      	bne.n	800516a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005148:	4b30      	ldr	r3, [pc, #192]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005150:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6892      	ldr	r2, [r2, #8]
 8005158:	0211      	lsls	r1, r2, #8
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	68d2      	ldr	r2, [r2, #12]
 800515e:	06d2      	lsls	r2, r2, #27
 8005160:	430a      	orrs	r2, r1
 8005162:	492a      	ldr	r1, [pc, #168]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005164:	4313      	orrs	r3, r2
 8005166:	610b      	str	r3, [r1, #16]
 8005168:	e027      	b.n	80051ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d112      	bne.n	8005196 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005170:	4b26      	ldr	r3, [pc, #152]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005178:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6892      	ldr	r2, [r2, #8]
 8005180:	0211      	lsls	r1, r2, #8
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6912      	ldr	r2, [r2, #16]
 8005186:	0852      	lsrs	r2, r2, #1
 8005188:	3a01      	subs	r2, #1
 800518a:	0552      	lsls	r2, r2, #21
 800518c:	430a      	orrs	r2, r1
 800518e:	491f      	ldr	r1, [pc, #124]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005190:	4313      	orrs	r3, r2
 8005192:	610b      	str	r3, [r1, #16]
 8005194:	e011      	b.n	80051ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005196:	4b1d      	ldr	r3, [pc, #116]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800519e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6892      	ldr	r2, [r2, #8]
 80051a6:	0211      	lsls	r1, r2, #8
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6952      	ldr	r2, [r2, #20]
 80051ac:	0852      	lsrs	r2, r2, #1
 80051ae:	3a01      	subs	r2, #1
 80051b0:	0652      	lsls	r2, r2, #25
 80051b2:	430a      	orrs	r2, r1
 80051b4:	4915      	ldr	r1, [pc, #84]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051ba:	4b14      	ldr	r3, [pc, #80]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a13      	ldr	r2, [pc, #76]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c6:	f7fc fa6d 	bl	80016a4 <HAL_GetTick>
 80051ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051cc:	e009      	b.n	80051e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051ce:	f7fc fa69 	bl	80016a4 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d902      	bls.n	80051e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	73fb      	strb	r3, [r7, #15]
          break;
 80051e0:	e005      	b.n	80051ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051e2:	4b0a      	ldr	r3, [pc, #40]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0ef      	beq.n	80051ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80051ee:	7bfb      	ldrb	r3, [r7, #15]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d106      	bne.n	8005202 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051f4:	4b05      	ldr	r3, [pc, #20]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	4903      	ldr	r1, [pc, #12]	@ (800520c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005202:	7bfb      	ldrb	r3, [r7, #15]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40021000 	.word	0x40021000

08005210 <std>:
 8005210:	2300      	movs	r3, #0
 8005212:	b510      	push	{r4, lr}
 8005214:	4604      	mov	r4, r0
 8005216:	e9c0 3300 	strd	r3, r3, [r0]
 800521a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800521e:	6083      	str	r3, [r0, #8]
 8005220:	8181      	strh	r1, [r0, #12]
 8005222:	6643      	str	r3, [r0, #100]	@ 0x64
 8005224:	81c2      	strh	r2, [r0, #14]
 8005226:	6183      	str	r3, [r0, #24]
 8005228:	4619      	mov	r1, r3
 800522a:	2208      	movs	r2, #8
 800522c:	305c      	adds	r0, #92	@ 0x5c
 800522e:	f000 f929 	bl	8005484 <memset>
 8005232:	4b0d      	ldr	r3, [pc, #52]	@ (8005268 <std+0x58>)
 8005234:	6263      	str	r3, [r4, #36]	@ 0x24
 8005236:	4b0d      	ldr	r3, [pc, #52]	@ (800526c <std+0x5c>)
 8005238:	62a3      	str	r3, [r4, #40]	@ 0x28
 800523a:	4b0d      	ldr	r3, [pc, #52]	@ (8005270 <std+0x60>)
 800523c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800523e:	4b0d      	ldr	r3, [pc, #52]	@ (8005274 <std+0x64>)
 8005240:	6323      	str	r3, [r4, #48]	@ 0x30
 8005242:	4b0d      	ldr	r3, [pc, #52]	@ (8005278 <std+0x68>)
 8005244:	6224      	str	r4, [r4, #32]
 8005246:	429c      	cmp	r4, r3
 8005248:	d006      	beq.n	8005258 <std+0x48>
 800524a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800524e:	4294      	cmp	r4, r2
 8005250:	d002      	beq.n	8005258 <std+0x48>
 8005252:	33d0      	adds	r3, #208	@ 0xd0
 8005254:	429c      	cmp	r4, r3
 8005256:	d105      	bne.n	8005264 <std+0x54>
 8005258:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800525c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005260:	f000 b942 	b.w	80054e8 <__retarget_lock_init_recursive>
 8005264:	bd10      	pop	{r4, pc}
 8005266:	bf00      	nop
 8005268:	08005d41 	.word	0x08005d41
 800526c:	08005d63 	.word	0x08005d63
 8005270:	08005d9b 	.word	0x08005d9b
 8005274:	08005dbf 	.word	0x08005dbf
 8005278:	200001c0 	.word	0x200001c0

0800527c <stdio_exit_handler>:
 800527c:	4a02      	ldr	r2, [pc, #8]	@ (8005288 <stdio_exit_handler+0xc>)
 800527e:	4903      	ldr	r1, [pc, #12]	@ (800528c <stdio_exit_handler+0x10>)
 8005280:	4803      	ldr	r0, [pc, #12]	@ (8005290 <stdio_exit_handler+0x14>)
 8005282:	f000 b869 	b.w	8005358 <_fwalk_sglue>
 8005286:	bf00      	nop
 8005288:	2000000c 	.word	0x2000000c
 800528c:	08005cd9 	.word	0x08005cd9
 8005290:	2000001c 	.word	0x2000001c

08005294 <cleanup_stdio>:
 8005294:	6841      	ldr	r1, [r0, #4]
 8005296:	4b0c      	ldr	r3, [pc, #48]	@ (80052c8 <cleanup_stdio+0x34>)
 8005298:	4299      	cmp	r1, r3
 800529a:	b510      	push	{r4, lr}
 800529c:	4604      	mov	r4, r0
 800529e:	d001      	beq.n	80052a4 <cleanup_stdio+0x10>
 80052a0:	f000 fd1a 	bl	8005cd8 <_fflush_r>
 80052a4:	68a1      	ldr	r1, [r4, #8]
 80052a6:	4b09      	ldr	r3, [pc, #36]	@ (80052cc <cleanup_stdio+0x38>)
 80052a8:	4299      	cmp	r1, r3
 80052aa:	d002      	beq.n	80052b2 <cleanup_stdio+0x1e>
 80052ac:	4620      	mov	r0, r4
 80052ae:	f000 fd13 	bl	8005cd8 <_fflush_r>
 80052b2:	68e1      	ldr	r1, [r4, #12]
 80052b4:	4b06      	ldr	r3, [pc, #24]	@ (80052d0 <cleanup_stdio+0x3c>)
 80052b6:	4299      	cmp	r1, r3
 80052b8:	d004      	beq.n	80052c4 <cleanup_stdio+0x30>
 80052ba:	4620      	mov	r0, r4
 80052bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c0:	f000 bd0a 	b.w	8005cd8 <_fflush_r>
 80052c4:	bd10      	pop	{r4, pc}
 80052c6:	bf00      	nop
 80052c8:	200001c0 	.word	0x200001c0
 80052cc:	20000228 	.word	0x20000228
 80052d0:	20000290 	.word	0x20000290

080052d4 <global_stdio_init.part.0>:
 80052d4:	b510      	push	{r4, lr}
 80052d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <global_stdio_init.part.0+0x30>)
 80052d8:	4c0b      	ldr	r4, [pc, #44]	@ (8005308 <global_stdio_init.part.0+0x34>)
 80052da:	4a0c      	ldr	r2, [pc, #48]	@ (800530c <global_stdio_init.part.0+0x38>)
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	4620      	mov	r0, r4
 80052e0:	2200      	movs	r2, #0
 80052e2:	2104      	movs	r1, #4
 80052e4:	f7ff ff94 	bl	8005210 <std>
 80052e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80052ec:	2201      	movs	r2, #1
 80052ee:	2109      	movs	r1, #9
 80052f0:	f7ff ff8e 	bl	8005210 <std>
 80052f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052f8:	2202      	movs	r2, #2
 80052fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052fe:	2112      	movs	r1, #18
 8005300:	f7ff bf86 	b.w	8005210 <std>
 8005304:	200002f8 	.word	0x200002f8
 8005308:	200001c0 	.word	0x200001c0
 800530c:	0800527d 	.word	0x0800527d

08005310 <__sfp_lock_acquire>:
 8005310:	4801      	ldr	r0, [pc, #4]	@ (8005318 <__sfp_lock_acquire+0x8>)
 8005312:	f000 b8ea 	b.w	80054ea <__retarget_lock_acquire_recursive>
 8005316:	bf00      	nop
 8005318:	200002fd 	.word	0x200002fd

0800531c <__sfp_lock_release>:
 800531c:	4801      	ldr	r0, [pc, #4]	@ (8005324 <__sfp_lock_release+0x8>)
 800531e:	f000 b8e5 	b.w	80054ec <__retarget_lock_release_recursive>
 8005322:	bf00      	nop
 8005324:	200002fd 	.word	0x200002fd

08005328 <__sinit>:
 8005328:	b510      	push	{r4, lr}
 800532a:	4604      	mov	r4, r0
 800532c:	f7ff fff0 	bl	8005310 <__sfp_lock_acquire>
 8005330:	6a23      	ldr	r3, [r4, #32]
 8005332:	b11b      	cbz	r3, 800533c <__sinit+0x14>
 8005334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005338:	f7ff bff0 	b.w	800531c <__sfp_lock_release>
 800533c:	4b04      	ldr	r3, [pc, #16]	@ (8005350 <__sinit+0x28>)
 800533e:	6223      	str	r3, [r4, #32]
 8005340:	4b04      	ldr	r3, [pc, #16]	@ (8005354 <__sinit+0x2c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f5      	bne.n	8005334 <__sinit+0xc>
 8005348:	f7ff ffc4 	bl	80052d4 <global_stdio_init.part.0>
 800534c:	e7f2      	b.n	8005334 <__sinit+0xc>
 800534e:	bf00      	nop
 8005350:	08005295 	.word	0x08005295
 8005354:	200002f8 	.word	0x200002f8

08005358 <_fwalk_sglue>:
 8005358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800535c:	4607      	mov	r7, r0
 800535e:	4688      	mov	r8, r1
 8005360:	4614      	mov	r4, r2
 8005362:	2600      	movs	r6, #0
 8005364:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005368:	f1b9 0901 	subs.w	r9, r9, #1
 800536c:	d505      	bpl.n	800537a <_fwalk_sglue+0x22>
 800536e:	6824      	ldr	r4, [r4, #0]
 8005370:	2c00      	cmp	r4, #0
 8005372:	d1f7      	bne.n	8005364 <_fwalk_sglue+0xc>
 8005374:	4630      	mov	r0, r6
 8005376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800537a:	89ab      	ldrh	r3, [r5, #12]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d907      	bls.n	8005390 <_fwalk_sglue+0x38>
 8005380:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005384:	3301      	adds	r3, #1
 8005386:	d003      	beq.n	8005390 <_fwalk_sglue+0x38>
 8005388:	4629      	mov	r1, r5
 800538a:	4638      	mov	r0, r7
 800538c:	47c0      	blx	r8
 800538e:	4306      	orrs	r6, r0
 8005390:	3568      	adds	r5, #104	@ 0x68
 8005392:	e7e9      	b.n	8005368 <_fwalk_sglue+0x10>

08005394 <iprintf>:
 8005394:	b40f      	push	{r0, r1, r2, r3}
 8005396:	b507      	push	{r0, r1, r2, lr}
 8005398:	4906      	ldr	r1, [pc, #24]	@ (80053b4 <iprintf+0x20>)
 800539a:	ab04      	add	r3, sp, #16
 800539c:	6808      	ldr	r0, [r1, #0]
 800539e:	f853 2b04 	ldr.w	r2, [r3], #4
 80053a2:	6881      	ldr	r1, [r0, #8]
 80053a4:	9301      	str	r3, [sp, #4]
 80053a6:	f000 f8cb 	bl	8005540 <_vfiprintf_r>
 80053aa:	b003      	add	sp, #12
 80053ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80053b0:	b004      	add	sp, #16
 80053b2:	4770      	bx	lr
 80053b4:	20000018 	.word	0x20000018

080053b8 <putchar>:
 80053b8:	4b02      	ldr	r3, [pc, #8]	@ (80053c4 <putchar+0xc>)
 80053ba:	4601      	mov	r1, r0
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	6882      	ldr	r2, [r0, #8]
 80053c0:	f000 bdf8 	b.w	8005fb4 <_putc_r>
 80053c4:	20000018 	.word	0x20000018

080053c8 <_puts_r>:
 80053c8:	6a03      	ldr	r3, [r0, #32]
 80053ca:	b570      	push	{r4, r5, r6, lr}
 80053cc:	6884      	ldr	r4, [r0, #8]
 80053ce:	4605      	mov	r5, r0
 80053d0:	460e      	mov	r6, r1
 80053d2:	b90b      	cbnz	r3, 80053d8 <_puts_r+0x10>
 80053d4:	f7ff ffa8 	bl	8005328 <__sinit>
 80053d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053da:	07db      	lsls	r3, r3, #31
 80053dc:	d405      	bmi.n	80053ea <_puts_r+0x22>
 80053de:	89a3      	ldrh	r3, [r4, #12]
 80053e0:	0598      	lsls	r0, r3, #22
 80053e2:	d402      	bmi.n	80053ea <_puts_r+0x22>
 80053e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053e6:	f000 f880 	bl	80054ea <__retarget_lock_acquire_recursive>
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	0719      	lsls	r1, r3, #28
 80053ee:	d502      	bpl.n	80053f6 <_puts_r+0x2e>
 80053f0:	6923      	ldr	r3, [r4, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d135      	bne.n	8005462 <_puts_r+0x9a>
 80053f6:	4621      	mov	r1, r4
 80053f8:	4628      	mov	r0, r5
 80053fa:	f000 fd23 	bl	8005e44 <__swsetup_r>
 80053fe:	b380      	cbz	r0, 8005462 <_puts_r+0x9a>
 8005400:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005404:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005406:	07da      	lsls	r2, r3, #31
 8005408:	d405      	bmi.n	8005416 <_puts_r+0x4e>
 800540a:	89a3      	ldrh	r3, [r4, #12]
 800540c:	059b      	lsls	r3, r3, #22
 800540e:	d402      	bmi.n	8005416 <_puts_r+0x4e>
 8005410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005412:	f000 f86b 	bl	80054ec <__retarget_lock_release_recursive>
 8005416:	4628      	mov	r0, r5
 8005418:	bd70      	pop	{r4, r5, r6, pc}
 800541a:	2b00      	cmp	r3, #0
 800541c:	da04      	bge.n	8005428 <_puts_r+0x60>
 800541e:	69a2      	ldr	r2, [r4, #24]
 8005420:	429a      	cmp	r2, r3
 8005422:	dc17      	bgt.n	8005454 <_puts_r+0x8c>
 8005424:	290a      	cmp	r1, #10
 8005426:	d015      	beq.n	8005454 <_puts_r+0x8c>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	6022      	str	r2, [r4, #0]
 800542e:	7019      	strb	r1, [r3, #0]
 8005430:	68a3      	ldr	r3, [r4, #8]
 8005432:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005436:	3b01      	subs	r3, #1
 8005438:	60a3      	str	r3, [r4, #8]
 800543a:	2900      	cmp	r1, #0
 800543c:	d1ed      	bne.n	800541a <_puts_r+0x52>
 800543e:	2b00      	cmp	r3, #0
 8005440:	da11      	bge.n	8005466 <_puts_r+0x9e>
 8005442:	4622      	mov	r2, r4
 8005444:	210a      	movs	r1, #10
 8005446:	4628      	mov	r0, r5
 8005448:	f000 fcbd 	bl	8005dc6 <__swbuf_r>
 800544c:	3001      	adds	r0, #1
 800544e:	d0d7      	beq.n	8005400 <_puts_r+0x38>
 8005450:	250a      	movs	r5, #10
 8005452:	e7d7      	b.n	8005404 <_puts_r+0x3c>
 8005454:	4622      	mov	r2, r4
 8005456:	4628      	mov	r0, r5
 8005458:	f000 fcb5 	bl	8005dc6 <__swbuf_r>
 800545c:	3001      	adds	r0, #1
 800545e:	d1e7      	bne.n	8005430 <_puts_r+0x68>
 8005460:	e7ce      	b.n	8005400 <_puts_r+0x38>
 8005462:	3e01      	subs	r6, #1
 8005464:	e7e4      	b.n	8005430 <_puts_r+0x68>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	6022      	str	r2, [r4, #0]
 800546c:	220a      	movs	r2, #10
 800546e:	701a      	strb	r2, [r3, #0]
 8005470:	e7ee      	b.n	8005450 <_puts_r+0x88>
	...

08005474 <puts>:
 8005474:	4b02      	ldr	r3, [pc, #8]	@ (8005480 <puts+0xc>)
 8005476:	4601      	mov	r1, r0
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	f7ff bfa5 	b.w	80053c8 <_puts_r>
 800547e:	bf00      	nop
 8005480:	20000018 	.word	0x20000018

08005484 <memset>:
 8005484:	4402      	add	r2, r0
 8005486:	4603      	mov	r3, r0
 8005488:	4293      	cmp	r3, r2
 800548a:	d100      	bne.n	800548e <memset+0xa>
 800548c:	4770      	bx	lr
 800548e:	f803 1b01 	strb.w	r1, [r3], #1
 8005492:	e7f9      	b.n	8005488 <memset+0x4>

08005494 <__errno>:
 8005494:	4b01      	ldr	r3, [pc, #4]	@ (800549c <__errno+0x8>)
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	20000018 	.word	0x20000018

080054a0 <__libc_init_array>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	4d0d      	ldr	r5, [pc, #52]	@ (80054d8 <__libc_init_array+0x38>)
 80054a4:	4c0d      	ldr	r4, [pc, #52]	@ (80054dc <__libc_init_array+0x3c>)
 80054a6:	1b64      	subs	r4, r4, r5
 80054a8:	10a4      	asrs	r4, r4, #2
 80054aa:	2600      	movs	r6, #0
 80054ac:	42a6      	cmp	r6, r4
 80054ae:	d109      	bne.n	80054c4 <__libc_init_array+0x24>
 80054b0:	4d0b      	ldr	r5, [pc, #44]	@ (80054e0 <__libc_init_array+0x40>)
 80054b2:	4c0c      	ldr	r4, [pc, #48]	@ (80054e4 <__libc_init_array+0x44>)
 80054b4:	f000 fe74 	bl	80061a0 <_init>
 80054b8:	1b64      	subs	r4, r4, r5
 80054ba:	10a4      	asrs	r4, r4, #2
 80054bc:	2600      	movs	r6, #0
 80054be:	42a6      	cmp	r6, r4
 80054c0:	d105      	bne.n	80054ce <__libc_init_array+0x2e>
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
 80054c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c8:	4798      	blx	r3
 80054ca:	3601      	adds	r6, #1
 80054cc:	e7ee      	b.n	80054ac <__libc_init_array+0xc>
 80054ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d2:	4798      	blx	r3
 80054d4:	3601      	adds	r6, #1
 80054d6:	e7f2      	b.n	80054be <__libc_init_array+0x1e>
 80054d8:	080062a8 	.word	0x080062a8
 80054dc:	080062a8 	.word	0x080062a8
 80054e0:	080062a8 	.word	0x080062a8
 80054e4:	080062ac 	.word	0x080062ac

080054e8 <__retarget_lock_init_recursive>:
 80054e8:	4770      	bx	lr

080054ea <__retarget_lock_acquire_recursive>:
 80054ea:	4770      	bx	lr

080054ec <__retarget_lock_release_recursive>:
 80054ec:	4770      	bx	lr

080054ee <__sfputc_r>:
 80054ee:	6893      	ldr	r3, [r2, #8]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	b410      	push	{r4}
 80054f6:	6093      	str	r3, [r2, #8]
 80054f8:	da08      	bge.n	800550c <__sfputc_r+0x1e>
 80054fa:	6994      	ldr	r4, [r2, #24]
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	db01      	blt.n	8005504 <__sfputc_r+0x16>
 8005500:	290a      	cmp	r1, #10
 8005502:	d103      	bne.n	800550c <__sfputc_r+0x1e>
 8005504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005508:	f000 bc5d 	b.w	8005dc6 <__swbuf_r>
 800550c:	6813      	ldr	r3, [r2, #0]
 800550e:	1c58      	adds	r0, r3, #1
 8005510:	6010      	str	r0, [r2, #0]
 8005512:	7019      	strb	r1, [r3, #0]
 8005514:	4608      	mov	r0, r1
 8005516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800551a:	4770      	bx	lr

0800551c <__sfputs_r>:
 800551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551e:	4606      	mov	r6, r0
 8005520:	460f      	mov	r7, r1
 8005522:	4614      	mov	r4, r2
 8005524:	18d5      	adds	r5, r2, r3
 8005526:	42ac      	cmp	r4, r5
 8005528:	d101      	bne.n	800552e <__sfputs_r+0x12>
 800552a:	2000      	movs	r0, #0
 800552c:	e007      	b.n	800553e <__sfputs_r+0x22>
 800552e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005532:	463a      	mov	r2, r7
 8005534:	4630      	mov	r0, r6
 8005536:	f7ff ffda 	bl	80054ee <__sfputc_r>
 800553a:	1c43      	adds	r3, r0, #1
 800553c:	d1f3      	bne.n	8005526 <__sfputs_r+0xa>
 800553e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005540 <_vfiprintf_r>:
 8005540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005544:	460d      	mov	r5, r1
 8005546:	b09d      	sub	sp, #116	@ 0x74
 8005548:	4614      	mov	r4, r2
 800554a:	4698      	mov	r8, r3
 800554c:	4606      	mov	r6, r0
 800554e:	b118      	cbz	r0, 8005558 <_vfiprintf_r+0x18>
 8005550:	6a03      	ldr	r3, [r0, #32]
 8005552:	b90b      	cbnz	r3, 8005558 <_vfiprintf_r+0x18>
 8005554:	f7ff fee8 	bl	8005328 <__sinit>
 8005558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800555a:	07d9      	lsls	r1, r3, #31
 800555c:	d405      	bmi.n	800556a <_vfiprintf_r+0x2a>
 800555e:	89ab      	ldrh	r3, [r5, #12]
 8005560:	059a      	lsls	r2, r3, #22
 8005562:	d402      	bmi.n	800556a <_vfiprintf_r+0x2a>
 8005564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005566:	f7ff ffc0 	bl	80054ea <__retarget_lock_acquire_recursive>
 800556a:	89ab      	ldrh	r3, [r5, #12]
 800556c:	071b      	lsls	r3, r3, #28
 800556e:	d501      	bpl.n	8005574 <_vfiprintf_r+0x34>
 8005570:	692b      	ldr	r3, [r5, #16]
 8005572:	b99b      	cbnz	r3, 800559c <_vfiprintf_r+0x5c>
 8005574:	4629      	mov	r1, r5
 8005576:	4630      	mov	r0, r6
 8005578:	f000 fc64 	bl	8005e44 <__swsetup_r>
 800557c:	b170      	cbz	r0, 800559c <_vfiprintf_r+0x5c>
 800557e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005580:	07dc      	lsls	r4, r3, #31
 8005582:	d504      	bpl.n	800558e <_vfiprintf_r+0x4e>
 8005584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005588:	b01d      	add	sp, #116	@ 0x74
 800558a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558e:	89ab      	ldrh	r3, [r5, #12]
 8005590:	0598      	lsls	r0, r3, #22
 8005592:	d4f7      	bmi.n	8005584 <_vfiprintf_r+0x44>
 8005594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005596:	f7ff ffa9 	bl	80054ec <__retarget_lock_release_recursive>
 800559a:	e7f3      	b.n	8005584 <_vfiprintf_r+0x44>
 800559c:	2300      	movs	r3, #0
 800559e:	9309      	str	r3, [sp, #36]	@ 0x24
 80055a0:	2320      	movs	r3, #32
 80055a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80055aa:	2330      	movs	r3, #48	@ 0x30
 80055ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800575c <_vfiprintf_r+0x21c>
 80055b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055b4:	f04f 0901 	mov.w	r9, #1
 80055b8:	4623      	mov	r3, r4
 80055ba:	469a      	mov	sl, r3
 80055bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055c0:	b10a      	cbz	r2, 80055c6 <_vfiprintf_r+0x86>
 80055c2:	2a25      	cmp	r2, #37	@ 0x25
 80055c4:	d1f9      	bne.n	80055ba <_vfiprintf_r+0x7a>
 80055c6:	ebba 0b04 	subs.w	fp, sl, r4
 80055ca:	d00b      	beq.n	80055e4 <_vfiprintf_r+0xa4>
 80055cc:	465b      	mov	r3, fp
 80055ce:	4622      	mov	r2, r4
 80055d0:	4629      	mov	r1, r5
 80055d2:	4630      	mov	r0, r6
 80055d4:	f7ff ffa2 	bl	800551c <__sfputs_r>
 80055d8:	3001      	adds	r0, #1
 80055da:	f000 80a7 	beq.w	800572c <_vfiprintf_r+0x1ec>
 80055de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055e0:	445a      	add	r2, fp
 80055e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80055e4:	f89a 3000 	ldrb.w	r3, [sl]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 809f 	beq.w	800572c <_vfiprintf_r+0x1ec>
 80055ee:	2300      	movs	r3, #0
 80055f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055f8:	f10a 0a01 	add.w	sl, sl, #1
 80055fc:	9304      	str	r3, [sp, #16]
 80055fe:	9307      	str	r3, [sp, #28]
 8005600:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005604:	931a      	str	r3, [sp, #104]	@ 0x68
 8005606:	4654      	mov	r4, sl
 8005608:	2205      	movs	r2, #5
 800560a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800560e:	4853      	ldr	r0, [pc, #332]	@ (800575c <_vfiprintf_r+0x21c>)
 8005610:	f7fa fdde 	bl	80001d0 <memchr>
 8005614:	9a04      	ldr	r2, [sp, #16]
 8005616:	b9d8      	cbnz	r0, 8005650 <_vfiprintf_r+0x110>
 8005618:	06d1      	lsls	r1, r2, #27
 800561a:	bf44      	itt	mi
 800561c:	2320      	movmi	r3, #32
 800561e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005622:	0713      	lsls	r3, r2, #28
 8005624:	bf44      	itt	mi
 8005626:	232b      	movmi	r3, #43	@ 0x2b
 8005628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800562c:	f89a 3000 	ldrb.w	r3, [sl]
 8005630:	2b2a      	cmp	r3, #42	@ 0x2a
 8005632:	d015      	beq.n	8005660 <_vfiprintf_r+0x120>
 8005634:	9a07      	ldr	r2, [sp, #28]
 8005636:	4654      	mov	r4, sl
 8005638:	2000      	movs	r0, #0
 800563a:	f04f 0c0a 	mov.w	ip, #10
 800563e:	4621      	mov	r1, r4
 8005640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005644:	3b30      	subs	r3, #48	@ 0x30
 8005646:	2b09      	cmp	r3, #9
 8005648:	d94b      	bls.n	80056e2 <_vfiprintf_r+0x1a2>
 800564a:	b1b0      	cbz	r0, 800567a <_vfiprintf_r+0x13a>
 800564c:	9207      	str	r2, [sp, #28]
 800564e:	e014      	b.n	800567a <_vfiprintf_r+0x13a>
 8005650:	eba0 0308 	sub.w	r3, r0, r8
 8005654:	fa09 f303 	lsl.w	r3, r9, r3
 8005658:	4313      	orrs	r3, r2
 800565a:	9304      	str	r3, [sp, #16]
 800565c:	46a2      	mov	sl, r4
 800565e:	e7d2      	b.n	8005606 <_vfiprintf_r+0xc6>
 8005660:	9b03      	ldr	r3, [sp, #12]
 8005662:	1d19      	adds	r1, r3, #4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	9103      	str	r1, [sp, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	bfbb      	ittet	lt
 800566c:	425b      	neglt	r3, r3
 800566e:	f042 0202 	orrlt.w	r2, r2, #2
 8005672:	9307      	strge	r3, [sp, #28]
 8005674:	9307      	strlt	r3, [sp, #28]
 8005676:	bfb8      	it	lt
 8005678:	9204      	strlt	r2, [sp, #16]
 800567a:	7823      	ldrb	r3, [r4, #0]
 800567c:	2b2e      	cmp	r3, #46	@ 0x2e
 800567e:	d10a      	bne.n	8005696 <_vfiprintf_r+0x156>
 8005680:	7863      	ldrb	r3, [r4, #1]
 8005682:	2b2a      	cmp	r3, #42	@ 0x2a
 8005684:	d132      	bne.n	80056ec <_vfiprintf_r+0x1ac>
 8005686:	9b03      	ldr	r3, [sp, #12]
 8005688:	1d1a      	adds	r2, r3, #4
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	9203      	str	r2, [sp, #12]
 800568e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005692:	3402      	adds	r4, #2
 8005694:	9305      	str	r3, [sp, #20]
 8005696:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800576c <_vfiprintf_r+0x22c>
 800569a:	7821      	ldrb	r1, [r4, #0]
 800569c:	2203      	movs	r2, #3
 800569e:	4650      	mov	r0, sl
 80056a0:	f7fa fd96 	bl	80001d0 <memchr>
 80056a4:	b138      	cbz	r0, 80056b6 <_vfiprintf_r+0x176>
 80056a6:	9b04      	ldr	r3, [sp, #16]
 80056a8:	eba0 000a 	sub.w	r0, r0, sl
 80056ac:	2240      	movs	r2, #64	@ 0x40
 80056ae:	4082      	lsls	r2, r0
 80056b0:	4313      	orrs	r3, r2
 80056b2:	3401      	adds	r4, #1
 80056b4:	9304      	str	r3, [sp, #16]
 80056b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ba:	4829      	ldr	r0, [pc, #164]	@ (8005760 <_vfiprintf_r+0x220>)
 80056bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056c0:	2206      	movs	r2, #6
 80056c2:	f7fa fd85 	bl	80001d0 <memchr>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d03f      	beq.n	800574a <_vfiprintf_r+0x20a>
 80056ca:	4b26      	ldr	r3, [pc, #152]	@ (8005764 <_vfiprintf_r+0x224>)
 80056cc:	bb1b      	cbnz	r3, 8005716 <_vfiprintf_r+0x1d6>
 80056ce:	9b03      	ldr	r3, [sp, #12]
 80056d0:	3307      	adds	r3, #7
 80056d2:	f023 0307 	bic.w	r3, r3, #7
 80056d6:	3308      	adds	r3, #8
 80056d8:	9303      	str	r3, [sp, #12]
 80056da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056dc:	443b      	add	r3, r7
 80056de:	9309      	str	r3, [sp, #36]	@ 0x24
 80056e0:	e76a      	b.n	80055b8 <_vfiprintf_r+0x78>
 80056e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80056e6:	460c      	mov	r4, r1
 80056e8:	2001      	movs	r0, #1
 80056ea:	e7a8      	b.n	800563e <_vfiprintf_r+0xfe>
 80056ec:	2300      	movs	r3, #0
 80056ee:	3401      	adds	r4, #1
 80056f0:	9305      	str	r3, [sp, #20]
 80056f2:	4619      	mov	r1, r3
 80056f4:	f04f 0c0a 	mov.w	ip, #10
 80056f8:	4620      	mov	r0, r4
 80056fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056fe:	3a30      	subs	r2, #48	@ 0x30
 8005700:	2a09      	cmp	r2, #9
 8005702:	d903      	bls.n	800570c <_vfiprintf_r+0x1cc>
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0c6      	beq.n	8005696 <_vfiprintf_r+0x156>
 8005708:	9105      	str	r1, [sp, #20]
 800570a:	e7c4      	b.n	8005696 <_vfiprintf_r+0x156>
 800570c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005710:	4604      	mov	r4, r0
 8005712:	2301      	movs	r3, #1
 8005714:	e7f0      	b.n	80056f8 <_vfiprintf_r+0x1b8>
 8005716:	ab03      	add	r3, sp, #12
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	462a      	mov	r2, r5
 800571c:	4b12      	ldr	r3, [pc, #72]	@ (8005768 <_vfiprintf_r+0x228>)
 800571e:	a904      	add	r1, sp, #16
 8005720:	4630      	mov	r0, r6
 8005722:	f3af 8000 	nop.w
 8005726:	4607      	mov	r7, r0
 8005728:	1c78      	adds	r0, r7, #1
 800572a:	d1d6      	bne.n	80056da <_vfiprintf_r+0x19a>
 800572c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800572e:	07d9      	lsls	r1, r3, #31
 8005730:	d405      	bmi.n	800573e <_vfiprintf_r+0x1fe>
 8005732:	89ab      	ldrh	r3, [r5, #12]
 8005734:	059a      	lsls	r2, r3, #22
 8005736:	d402      	bmi.n	800573e <_vfiprintf_r+0x1fe>
 8005738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800573a:	f7ff fed7 	bl	80054ec <__retarget_lock_release_recursive>
 800573e:	89ab      	ldrh	r3, [r5, #12]
 8005740:	065b      	lsls	r3, r3, #25
 8005742:	f53f af1f 	bmi.w	8005584 <_vfiprintf_r+0x44>
 8005746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005748:	e71e      	b.n	8005588 <_vfiprintf_r+0x48>
 800574a:	ab03      	add	r3, sp, #12
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	462a      	mov	r2, r5
 8005750:	4b05      	ldr	r3, [pc, #20]	@ (8005768 <_vfiprintf_r+0x228>)
 8005752:	a904      	add	r1, sp, #16
 8005754:	4630      	mov	r0, r6
 8005756:	f000 f91b 	bl	8005990 <_printf_i>
 800575a:	e7e4      	b.n	8005726 <_vfiprintf_r+0x1e6>
 800575c:	0800626c 	.word	0x0800626c
 8005760:	08006276 	.word	0x08006276
 8005764:	00000000 	.word	0x00000000
 8005768:	0800551d 	.word	0x0800551d
 800576c:	08006272 	.word	0x08006272

08005770 <sbrk_aligned>:
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	4e0f      	ldr	r6, [pc, #60]	@ (80057b0 <sbrk_aligned+0x40>)
 8005774:	460c      	mov	r4, r1
 8005776:	6831      	ldr	r1, [r6, #0]
 8005778:	4605      	mov	r5, r0
 800577a:	b911      	cbnz	r1, 8005782 <sbrk_aligned+0x12>
 800577c:	f000 fca4 	bl	80060c8 <_sbrk_r>
 8005780:	6030      	str	r0, [r6, #0]
 8005782:	4621      	mov	r1, r4
 8005784:	4628      	mov	r0, r5
 8005786:	f000 fc9f 	bl	80060c8 <_sbrk_r>
 800578a:	1c43      	adds	r3, r0, #1
 800578c:	d103      	bne.n	8005796 <sbrk_aligned+0x26>
 800578e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005792:	4620      	mov	r0, r4
 8005794:	bd70      	pop	{r4, r5, r6, pc}
 8005796:	1cc4      	adds	r4, r0, #3
 8005798:	f024 0403 	bic.w	r4, r4, #3
 800579c:	42a0      	cmp	r0, r4
 800579e:	d0f8      	beq.n	8005792 <sbrk_aligned+0x22>
 80057a0:	1a21      	subs	r1, r4, r0
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 fc90 	bl	80060c8 <_sbrk_r>
 80057a8:	3001      	adds	r0, #1
 80057aa:	d1f2      	bne.n	8005792 <sbrk_aligned+0x22>
 80057ac:	e7ef      	b.n	800578e <sbrk_aligned+0x1e>
 80057ae:	bf00      	nop
 80057b0:	20000300 	.word	0x20000300

080057b4 <_malloc_r>:
 80057b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057b8:	1ccd      	adds	r5, r1, #3
 80057ba:	f025 0503 	bic.w	r5, r5, #3
 80057be:	3508      	adds	r5, #8
 80057c0:	2d0c      	cmp	r5, #12
 80057c2:	bf38      	it	cc
 80057c4:	250c      	movcc	r5, #12
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	4606      	mov	r6, r0
 80057ca:	db01      	blt.n	80057d0 <_malloc_r+0x1c>
 80057cc:	42a9      	cmp	r1, r5
 80057ce:	d904      	bls.n	80057da <_malloc_r+0x26>
 80057d0:	230c      	movs	r3, #12
 80057d2:	6033      	str	r3, [r6, #0]
 80057d4:	2000      	movs	r0, #0
 80057d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058b0 <_malloc_r+0xfc>
 80057de:	f000 faa3 	bl	8005d28 <__malloc_lock>
 80057e2:	f8d8 3000 	ldr.w	r3, [r8]
 80057e6:	461c      	mov	r4, r3
 80057e8:	bb44      	cbnz	r4, 800583c <_malloc_r+0x88>
 80057ea:	4629      	mov	r1, r5
 80057ec:	4630      	mov	r0, r6
 80057ee:	f7ff ffbf 	bl	8005770 <sbrk_aligned>
 80057f2:	1c43      	adds	r3, r0, #1
 80057f4:	4604      	mov	r4, r0
 80057f6:	d158      	bne.n	80058aa <_malloc_r+0xf6>
 80057f8:	f8d8 4000 	ldr.w	r4, [r8]
 80057fc:	4627      	mov	r7, r4
 80057fe:	2f00      	cmp	r7, #0
 8005800:	d143      	bne.n	800588a <_malloc_r+0xd6>
 8005802:	2c00      	cmp	r4, #0
 8005804:	d04b      	beq.n	800589e <_malloc_r+0xea>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	4639      	mov	r1, r7
 800580a:	4630      	mov	r0, r6
 800580c:	eb04 0903 	add.w	r9, r4, r3
 8005810:	f000 fc5a 	bl	80060c8 <_sbrk_r>
 8005814:	4581      	cmp	r9, r0
 8005816:	d142      	bne.n	800589e <_malloc_r+0xea>
 8005818:	6821      	ldr	r1, [r4, #0]
 800581a:	1a6d      	subs	r5, r5, r1
 800581c:	4629      	mov	r1, r5
 800581e:	4630      	mov	r0, r6
 8005820:	f7ff ffa6 	bl	8005770 <sbrk_aligned>
 8005824:	3001      	adds	r0, #1
 8005826:	d03a      	beq.n	800589e <_malloc_r+0xea>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	442b      	add	r3, r5
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	f8d8 3000 	ldr.w	r3, [r8]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	bb62      	cbnz	r2, 8005890 <_malloc_r+0xdc>
 8005836:	f8c8 7000 	str.w	r7, [r8]
 800583a:	e00f      	b.n	800585c <_malloc_r+0xa8>
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	1b52      	subs	r2, r2, r5
 8005840:	d420      	bmi.n	8005884 <_malloc_r+0xd0>
 8005842:	2a0b      	cmp	r2, #11
 8005844:	d917      	bls.n	8005876 <_malloc_r+0xc2>
 8005846:	1961      	adds	r1, r4, r5
 8005848:	42a3      	cmp	r3, r4
 800584a:	6025      	str	r5, [r4, #0]
 800584c:	bf18      	it	ne
 800584e:	6059      	strne	r1, [r3, #4]
 8005850:	6863      	ldr	r3, [r4, #4]
 8005852:	bf08      	it	eq
 8005854:	f8c8 1000 	streq.w	r1, [r8]
 8005858:	5162      	str	r2, [r4, r5]
 800585a:	604b      	str	r3, [r1, #4]
 800585c:	4630      	mov	r0, r6
 800585e:	f000 fa69 	bl	8005d34 <__malloc_unlock>
 8005862:	f104 000b 	add.w	r0, r4, #11
 8005866:	1d23      	adds	r3, r4, #4
 8005868:	f020 0007 	bic.w	r0, r0, #7
 800586c:	1ac2      	subs	r2, r0, r3
 800586e:	bf1c      	itt	ne
 8005870:	1a1b      	subne	r3, r3, r0
 8005872:	50a3      	strne	r3, [r4, r2]
 8005874:	e7af      	b.n	80057d6 <_malloc_r+0x22>
 8005876:	6862      	ldr	r2, [r4, #4]
 8005878:	42a3      	cmp	r3, r4
 800587a:	bf0c      	ite	eq
 800587c:	f8c8 2000 	streq.w	r2, [r8]
 8005880:	605a      	strne	r2, [r3, #4]
 8005882:	e7eb      	b.n	800585c <_malloc_r+0xa8>
 8005884:	4623      	mov	r3, r4
 8005886:	6864      	ldr	r4, [r4, #4]
 8005888:	e7ae      	b.n	80057e8 <_malloc_r+0x34>
 800588a:	463c      	mov	r4, r7
 800588c:	687f      	ldr	r7, [r7, #4]
 800588e:	e7b6      	b.n	80057fe <_malloc_r+0x4a>
 8005890:	461a      	mov	r2, r3
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	42a3      	cmp	r3, r4
 8005896:	d1fb      	bne.n	8005890 <_malloc_r+0xdc>
 8005898:	2300      	movs	r3, #0
 800589a:	6053      	str	r3, [r2, #4]
 800589c:	e7de      	b.n	800585c <_malloc_r+0xa8>
 800589e:	230c      	movs	r3, #12
 80058a0:	6033      	str	r3, [r6, #0]
 80058a2:	4630      	mov	r0, r6
 80058a4:	f000 fa46 	bl	8005d34 <__malloc_unlock>
 80058a8:	e794      	b.n	80057d4 <_malloc_r+0x20>
 80058aa:	6005      	str	r5, [r0, #0]
 80058ac:	e7d6      	b.n	800585c <_malloc_r+0xa8>
 80058ae:	bf00      	nop
 80058b0:	20000304 	.word	0x20000304

080058b4 <_printf_common>:
 80058b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b8:	4616      	mov	r6, r2
 80058ba:	4698      	mov	r8, r3
 80058bc:	688a      	ldr	r2, [r1, #8]
 80058be:	690b      	ldr	r3, [r1, #16]
 80058c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058c4:	4293      	cmp	r3, r2
 80058c6:	bfb8      	it	lt
 80058c8:	4613      	movlt	r3, r2
 80058ca:	6033      	str	r3, [r6, #0]
 80058cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058d0:	4607      	mov	r7, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	b10a      	cbz	r2, 80058da <_printf_common+0x26>
 80058d6:	3301      	adds	r3, #1
 80058d8:	6033      	str	r3, [r6, #0]
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	0699      	lsls	r1, r3, #26
 80058de:	bf42      	ittt	mi
 80058e0:	6833      	ldrmi	r3, [r6, #0]
 80058e2:	3302      	addmi	r3, #2
 80058e4:	6033      	strmi	r3, [r6, #0]
 80058e6:	6825      	ldr	r5, [r4, #0]
 80058e8:	f015 0506 	ands.w	r5, r5, #6
 80058ec:	d106      	bne.n	80058fc <_printf_common+0x48>
 80058ee:	f104 0a19 	add.w	sl, r4, #25
 80058f2:	68e3      	ldr	r3, [r4, #12]
 80058f4:	6832      	ldr	r2, [r6, #0]
 80058f6:	1a9b      	subs	r3, r3, r2
 80058f8:	42ab      	cmp	r3, r5
 80058fa:	dc26      	bgt.n	800594a <_printf_common+0x96>
 80058fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005900:	6822      	ldr	r2, [r4, #0]
 8005902:	3b00      	subs	r3, #0
 8005904:	bf18      	it	ne
 8005906:	2301      	movne	r3, #1
 8005908:	0692      	lsls	r2, r2, #26
 800590a:	d42b      	bmi.n	8005964 <_printf_common+0xb0>
 800590c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005910:	4641      	mov	r1, r8
 8005912:	4638      	mov	r0, r7
 8005914:	47c8      	blx	r9
 8005916:	3001      	adds	r0, #1
 8005918:	d01e      	beq.n	8005958 <_printf_common+0xa4>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	6922      	ldr	r2, [r4, #16]
 800591e:	f003 0306 	and.w	r3, r3, #6
 8005922:	2b04      	cmp	r3, #4
 8005924:	bf02      	ittt	eq
 8005926:	68e5      	ldreq	r5, [r4, #12]
 8005928:	6833      	ldreq	r3, [r6, #0]
 800592a:	1aed      	subeq	r5, r5, r3
 800592c:	68a3      	ldr	r3, [r4, #8]
 800592e:	bf0c      	ite	eq
 8005930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005934:	2500      	movne	r5, #0
 8005936:	4293      	cmp	r3, r2
 8005938:	bfc4      	itt	gt
 800593a:	1a9b      	subgt	r3, r3, r2
 800593c:	18ed      	addgt	r5, r5, r3
 800593e:	2600      	movs	r6, #0
 8005940:	341a      	adds	r4, #26
 8005942:	42b5      	cmp	r5, r6
 8005944:	d11a      	bne.n	800597c <_printf_common+0xc8>
 8005946:	2000      	movs	r0, #0
 8005948:	e008      	b.n	800595c <_printf_common+0xa8>
 800594a:	2301      	movs	r3, #1
 800594c:	4652      	mov	r2, sl
 800594e:	4641      	mov	r1, r8
 8005950:	4638      	mov	r0, r7
 8005952:	47c8      	blx	r9
 8005954:	3001      	adds	r0, #1
 8005956:	d103      	bne.n	8005960 <_printf_common+0xac>
 8005958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800595c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005960:	3501      	adds	r5, #1
 8005962:	e7c6      	b.n	80058f2 <_printf_common+0x3e>
 8005964:	18e1      	adds	r1, r4, r3
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	2030      	movs	r0, #48	@ 0x30
 800596a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800596e:	4422      	add	r2, r4
 8005970:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005974:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005978:	3302      	adds	r3, #2
 800597a:	e7c7      	b.n	800590c <_printf_common+0x58>
 800597c:	2301      	movs	r3, #1
 800597e:	4622      	mov	r2, r4
 8005980:	4641      	mov	r1, r8
 8005982:	4638      	mov	r0, r7
 8005984:	47c8      	blx	r9
 8005986:	3001      	adds	r0, #1
 8005988:	d0e6      	beq.n	8005958 <_printf_common+0xa4>
 800598a:	3601      	adds	r6, #1
 800598c:	e7d9      	b.n	8005942 <_printf_common+0x8e>
	...

08005990 <_printf_i>:
 8005990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005994:	7e0f      	ldrb	r7, [r1, #24]
 8005996:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005998:	2f78      	cmp	r7, #120	@ 0x78
 800599a:	4691      	mov	r9, r2
 800599c:	4680      	mov	r8, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	469a      	mov	sl, r3
 80059a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059a6:	d807      	bhi.n	80059b8 <_printf_i+0x28>
 80059a8:	2f62      	cmp	r7, #98	@ 0x62
 80059aa:	d80a      	bhi.n	80059c2 <_printf_i+0x32>
 80059ac:	2f00      	cmp	r7, #0
 80059ae:	f000 80d2 	beq.w	8005b56 <_printf_i+0x1c6>
 80059b2:	2f58      	cmp	r7, #88	@ 0x58
 80059b4:	f000 80b9 	beq.w	8005b2a <_printf_i+0x19a>
 80059b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059c0:	e03a      	b.n	8005a38 <_printf_i+0xa8>
 80059c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059c6:	2b15      	cmp	r3, #21
 80059c8:	d8f6      	bhi.n	80059b8 <_printf_i+0x28>
 80059ca:	a101      	add	r1, pc, #4	@ (adr r1, 80059d0 <_printf_i+0x40>)
 80059cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059d0:	08005a29 	.word	0x08005a29
 80059d4:	08005a3d 	.word	0x08005a3d
 80059d8:	080059b9 	.word	0x080059b9
 80059dc:	080059b9 	.word	0x080059b9
 80059e0:	080059b9 	.word	0x080059b9
 80059e4:	080059b9 	.word	0x080059b9
 80059e8:	08005a3d 	.word	0x08005a3d
 80059ec:	080059b9 	.word	0x080059b9
 80059f0:	080059b9 	.word	0x080059b9
 80059f4:	080059b9 	.word	0x080059b9
 80059f8:	080059b9 	.word	0x080059b9
 80059fc:	08005b3d 	.word	0x08005b3d
 8005a00:	08005a67 	.word	0x08005a67
 8005a04:	08005af7 	.word	0x08005af7
 8005a08:	080059b9 	.word	0x080059b9
 8005a0c:	080059b9 	.word	0x080059b9
 8005a10:	08005b5f 	.word	0x08005b5f
 8005a14:	080059b9 	.word	0x080059b9
 8005a18:	08005a67 	.word	0x08005a67
 8005a1c:	080059b9 	.word	0x080059b9
 8005a20:	080059b9 	.word	0x080059b9
 8005a24:	08005aff 	.word	0x08005aff
 8005a28:	6833      	ldr	r3, [r6, #0]
 8005a2a:	1d1a      	adds	r2, r3, #4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6032      	str	r2, [r6, #0]
 8005a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e09d      	b.n	8005b78 <_printf_i+0x1e8>
 8005a3c:	6833      	ldr	r3, [r6, #0]
 8005a3e:	6820      	ldr	r0, [r4, #0]
 8005a40:	1d19      	adds	r1, r3, #4
 8005a42:	6031      	str	r1, [r6, #0]
 8005a44:	0606      	lsls	r6, r0, #24
 8005a46:	d501      	bpl.n	8005a4c <_printf_i+0xbc>
 8005a48:	681d      	ldr	r5, [r3, #0]
 8005a4a:	e003      	b.n	8005a54 <_printf_i+0xc4>
 8005a4c:	0645      	lsls	r5, r0, #25
 8005a4e:	d5fb      	bpl.n	8005a48 <_printf_i+0xb8>
 8005a50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a54:	2d00      	cmp	r5, #0
 8005a56:	da03      	bge.n	8005a60 <_printf_i+0xd0>
 8005a58:	232d      	movs	r3, #45	@ 0x2d
 8005a5a:	426d      	negs	r5, r5
 8005a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a60:	4859      	ldr	r0, [pc, #356]	@ (8005bc8 <_printf_i+0x238>)
 8005a62:	230a      	movs	r3, #10
 8005a64:	e011      	b.n	8005a8a <_printf_i+0xfa>
 8005a66:	6821      	ldr	r1, [r4, #0]
 8005a68:	6833      	ldr	r3, [r6, #0]
 8005a6a:	0608      	lsls	r0, r1, #24
 8005a6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a70:	d402      	bmi.n	8005a78 <_printf_i+0xe8>
 8005a72:	0649      	lsls	r1, r1, #25
 8005a74:	bf48      	it	mi
 8005a76:	b2ad      	uxthmi	r5, r5
 8005a78:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a7a:	4853      	ldr	r0, [pc, #332]	@ (8005bc8 <_printf_i+0x238>)
 8005a7c:	6033      	str	r3, [r6, #0]
 8005a7e:	bf14      	ite	ne
 8005a80:	230a      	movne	r3, #10
 8005a82:	2308      	moveq	r3, #8
 8005a84:	2100      	movs	r1, #0
 8005a86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a8a:	6866      	ldr	r6, [r4, #4]
 8005a8c:	60a6      	str	r6, [r4, #8]
 8005a8e:	2e00      	cmp	r6, #0
 8005a90:	bfa2      	ittt	ge
 8005a92:	6821      	ldrge	r1, [r4, #0]
 8005a94:	f021 0104 	bicge.w	r1, r1, #4
 8005a98:	6021      	strge	r1, [r4, #0]
 8005a9a:	b90d      	cbnz	r5, 8005aa0 <_printf_i+0x110>
 8005a9c:	2e00      	cmp	r6, #0
 8005a9e:	d04b      	beq.n	8005b38 <_printf_i+0x1a8>
 8005aa0:	4616      	mov	r6, r2
 8005aa2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005aa6:	fb03 5711 	mls	r7, r3, r1, r5
 8005aaa:	5dc7      	ldrb	r7, [r0, r7]
 8005aac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ab0:	462f      	mov	r7, r5
 8005ab2:	42bb      	cmp	r3, r7
 8005ab4:	460d      	mov	r5, r1
 8005ab6:	d9f4      	bls.n	8005aa2 <_printf_i+0x112>
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d10b      	bne.n	8005ad4 <_printf_i+0x144>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	07df      	lsls	r7, r3, #31
 8005ac0:	d508      	bpl.n	8005ad4 <_printf_i+0x144>
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	6861      	ldr	r1, [r4, #4]
 8005ac6:	4299      	cmp	r1, r3
 8005ac8:	bfde      	ittt	le
 8005aca:	2330      	movle	r3, #48	@ 0x30
 8005acc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ad0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005ad4:	1b92      	subs	r2, r2, r6
 8005ad6:	6122      	str	r2, [r4, #16]
 8005ad8:	f8cd a000 	str.w	sl, [sp]
 8005adc:	464b      	mov	r3, r9
 8005ade:	aa03      	add	r2, sp, #12
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	f7ff fee6 	bl	80058b4 <_printf_common>
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d14a      	bne.n	8005b82 <_printf_i+0x1f2>
 8005aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005af0:	b004      	add	sp, #16
 8005af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	f043 0320 	orr.w	r3, r3, #32
 8005afc:	6023      	str	r3, [r4, #0]
 8005afe:	4833      	ldr	r0, [pc, #204]	@ (8005bcc <_printf_i+0x23c>)
 8005b00:	2778      	movs	r7, #120	@ 0x78
 8005b02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	6831      	ldr	r1, [r6, #0]
 8005b0a:	061f      	lsls	r7, r3, #24
 8005b0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b10:	d402      	bmi.n	8005b18 <_printf_i+0x188>
 8005b12:	065f      	lsls	r7, r3, #25
 8005b14:	bf48      	it	mi
 8005b16:	b2ad      	uxthmi	r5, r5
 8005b18:	6031      	str	r1, [r6, #0]
 8005b1a:	07d9      	lsls	r1, r3, #31
 8005b1c:	bf44      	itt	mi
 8005b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8005b22:	6023      	strmi	r3, [r4, #0]
 8005b24:	b11d      	cbz	r5, 8005b2e <_printf_i+0x19e>
 8005b26:	2310      	movs	r3, #16
 8005b28:	e7ac      	b.n	8005a84 <_printf_i+0xf4>
 8005b2a:	4827      	ldr	r0, [pc, #156]	@ (8005bc8 <_printf_i+0x238>)
 8005b2c:	e7e9      	b.n	8005b02 <_printf_i+0x172>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	f023 0320 	bic.w	r3, r3, #32
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	e7f6      	b.n	8005b26 <_printf_i+0x196>
 8005b38:	4616      	mov	r6, r2
 8005b3a:	e7bd      	b.n	8005ab8 <_printf_i+0x128>
 8005b3c:	6833      	ldr	r3, [r6, #0]
 8005b3e:	6825      	ldr	r5, [r4, #0]
 8005b40:	6961      	ldr	r1, [r4, #20]
 8005b42:	1d18      	adds	r0, r3, #4
 8005b44:	6030      	str	r0, [r6, #0]
 8005b46:	062e      	lsls	r6, r5, #24
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	d501      	bpl.n	8005b50 <_printf_i+0x1c0>
 8005b4c:	6019      	str	r1, [r3, #0]
 8005b4e:	e002      	b.n	8005b56 <_printf_i+0x1c6>
 8005b50:	0668      	lsls	r0, r5, #25
 8005b52:	d5fb      	bpl.n	8005b4c <_printf_i+0x1bc>
 8005b54:	8019      	strh	r1, [r3, #0]
 8005b56:	2300      	movs	r3, #0
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	4616      	mov	r6, r2
 8005b5c:	e7bc      	b.n	8005ad8 <_printf_i+0x148>
 8005b5e:	6833      	ldr	r3, [r6, #0]
 8005b60:	1d1a      	adds	r2, r3, #4
 8005b62:	6032      	str	r2, [r6, #0]
 8005b64:	681e      	ldr	r6, [r3, #0]
 8005b66:	6862      	ldr	r2, [r4, #4]
 8005b68:	2100      	movs	r1, #0
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7fa fb30 	bl	80001d0 <memchr>
 8005b70:	b108      	cbz	r0, 8005b76 <_printf_i+0x1e6>
 8005b72:	1b80      	subs	r0, r0, r6
 8005b74:	6060      	str	r0, [r4, #4]
 8005b76:	6863      	ldr	r3, [r4, #4]
 8005b78:	6123      	str	r3, [r4, #16]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b80:	e7aa      	b.n	8005ad8 <_printf_i+0x148>
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	4632      	mov	r2, r6
 8005b86:	4649      	mov	r1, r9
 8005b88:	4640      	mov	r0, r8
 8005b8a:	47d0      	blx	sl
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d0ad      	beq.n	8005aec <_printf_i+0x15c>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	079b      	lsls	r3, r3, #30
 8005b94:	d413      	bmi.n	8005bbe <_printf_i+0x22e>
 8005b96:	68e0      	ldr	r0, [r4, #12]
 8005b98:	9b03      	ldr	r3, [sp, #12]
 8005b9a:	4298      	cmp	r0, r3
 8005b9c:	bfb8      	it	lt
 8005b9e:	4618      	movlt	r0, r3
 8005ba0:	e7a6      	b.n	8005af0 <_printf_i+0x160>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4632      	mov	r2, r6
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	4640      	mov	r0, r8
 8005baa:	47d0      	blx	sl
 8005bac:	3001      	adds	r0, #1
 8005bae:	d09d      	beq.n	8005aec <_printf_i+0x15c>
 8005bb0:	3501      	adds	r5, #1
 8005bb2:	68e3      	ldr	r3, [r4, #12]
 8005bb4:	9903      	ldr	r1, [sp, #12]
 8005bb6:	1a5b      	subs	r3, r3, r1
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	dcf2      	bgt.n	8005ba2 <_printf_i+0x212>
 8005bbc:	e7eb      	b.n	8005b96 <_printf_i+0x206>
 8005bbe:	2500      	movs	r5, #0
 8005bc0:	f104 0619 	add.w	r6, r4, #25
 8005bc4:	e7f5      	b.n	8005bb2 <_printf_i+0x222>
 8005bc6:	bf00      	nop
 8005bc8:	0800627d 	.word	0x0800627d
 8005bcc:	0800628e 	.word	0x0800628e

08005bd0 <__sflush_r>:
 8005bd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd8:	0716      	lsls	r6, r2, #28
 8005bda:	4605      	mov	r5, r0
 8005bdc:	460c      	mov	r4, r1
 8005bde:	d454      	bmi.n	8005c8a <__sflush_r+0xba>
 8005be0:	684b      	ldr	r3, [r1, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	dc02      	bgt.n	8005bec <__sflush_r+0x1c>
 8005be6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	dd48      	ble.n	8005c7e <__sflush_r+0xae>
 8005bec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bee:	2e00      	cmp	r6, #0
 8005bf0:	d045      	beq.n	8005c7e <__sflush_r+0xae>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005bf8:	682f      	ldr	r7, [r5, #0]
 8005bfa:	6a21      	ldr	r1, [r4, #32]
 8005bfc:	602b      	str	r3, [r5, #0]
 8005bfe:	d030      	beq.n	8005c62 <__sflush_r+0x92>
 8005c00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c02:	89a3      	ldrh	r3, [r4, #12]
 8005c04:	0759      	lsls	r1, r3, #29
 8005c06:	d505      	bpl.n	8005c14 <__sflush_r+0x44>
 8005c08:	6863      	ldr	r3, [r4, #4]
 8005c0a:	1ad2      	subs	r2, r2, r3
 8005c0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c0e:	b10b      	cbz	r3, 8005c14 <__sflush_r+0x44>
 8005c10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c12:	1ad2      	subs	r2, r2, r3
 8005c14:	2300      	movs	r3, #0
 8005c16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c18:	6a21      	ldr	r1, [r4, #32]
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	47b0      	blx	r6
 8005c1e:	1c43      	adds	r3, r0, #1
 8005c20:	89a3      	ldrh	r3, [r4, #12]
 8005c22:	d106      	bne.n	8005c32 <__sflush_r+0x62>
 8005c24:	6829      	ldr	r1, [r5, #0]
 8005c26:	291d      	cmp	r1, #29
 8005c28:	d82b      	bhi.n	8005c82 <__sflush_r+0xb2>
 8005c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8005cd4 <__sflush_r+0x104>)
 8005c2c:	410a      	asrs	r2, r1
 8005c2e:	07d6      	lsls	r6, r2, #31
 8005c30:	d427      	bmi.n	8005c82 <__sflush_r+0xb2>
 8005c32:	2200      	movs	r2, #0
 8005c34:	6062      	str	r2, [r4, #4]
 8005c36:	04d9      	lsls	r1, r3, #19
 8005c38:	6922      	ldr	r2, [r4, #16]
 8005c3a:	6022      	str	r2, [r4, #0]
 8005c3c:	d504      	bpl.n	8005c48 <__sflush_r+0x78>
 8005c3e:	1c42      	adds	r2, r0, #1
 8005c40:	d101      	bne.n	8005c46 <__sflush_r+0x76>
 8005c42:	682b      	ldr	r3, [r5, #0]
 8005c44:	b903      	cbnz	r3, 8005c48 <__sflush_r+0x78>
 8005c46:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c4a:	602f      	str	r7, [r5, #0]
 8005c4c:	b1b9      	cbz	r1, 8005c7e <__sflush_r+0xae>
 8005c4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c52:	4299      	cmp	r1, r3
 8005c54:	d002      	beq.n	8005c5c <__sflush_r+0x8c>
 8005c56:	4628      	mov	r0, r5
 8005c58:	f000 fa58 	bl	800610c <_free_r>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c60:	e00d      	b.n	8005c7e <__sflush_r+0xae>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4628      	mov	r0, r5
 8005c66:	47b0      	blx	r6
 8005c68:	4602      	mov	r2, r0
 8005c6a:	1c50      	adds	r0, r2, #1
 8005c6c:	d1c9      	bne.n	8005c02 <__sflush_r+0x32>
 8005c6e:	682b      	ldr	r3, [r5, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0c6      	beq.n	8005c02 <__sflush_r+0x32>
 8005c74:	2b1d      	cmp	r3, #29
 8005c76:	d001      	beq.n	8005c7c <__sflush_r+0xac>
 8005c78:	2b16      	cmp	r3, #22
 8005c7a:	d11e      	bne.n	8005cba <__sflush_r+0xea>
 8005c7c:	602f      	str	r7, [r5, #0]
 8005c7e:	2000      	movs	r0, #0
 8005c80:	e022      	b.n	8005cc8 <__sflush_r+0xf8>
 8005c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c86:	b21b      	sxth	r3, r3
 8005c88:	e01b      	b.n	8005cc2 <__sflush_r+0xf2>
 8005c8a:	690f      	ldr	r7, [r1, #16]
 8005c8c:	2f00      	cmp	r7, #0
 8005c8e:	d0f6      	beq.n	8005c7e <__sflush_r+0xae>
 8005c90:	0793      	lsls	r3, r2, #30
 8005c92:	680e      	ldr	r6, [r1, #0]
 8005c94:	bf08      	it	eq
 8005c96:	694b      	ldreq	r3, [r1, #20]
 8005c98:	600f      	str	r7, [r1, #0]
 8005c9a:	bf18      	it	ne
 8005c9c:	2300      	movne	r3, #0
 8005c9e:	eba6 0807 	sub.w	r8, r6, r7
 8005ca2:	608b      	str	r3, [r1, #8]
 8005ca4:	f1b8 0f00 	cmp.w	r8, #0
 8005ca8:	dde9      	ble.n	8005c7e <__sflush_r+0xae>
 8005caa:	6a21      	ldr	r1, [r4, #32]
 8005cac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005cae:	4643      	mov	r3, r8
 8005cb0:	463a      	mov	r2, r7
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	47b0      	blx	r6
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	dc08      	bgt.n	8005ccc <__sflush_r+0xfc>
 8005cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cc2:	81a3      	strh	r3, [r4, #12]
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ccc:	4407      	add	r7, r0
 8005cce:	eba8 0800 	sub.w	r8, r8, r0
 8005cd2:	e7e7      	b.n	8005ca4 <__sflush_r+0xd4>
 8005cd4:	dfbffffe 	.word	0xdfbffffe

08005cd8 <_fflush_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	690b      	ldr	r3, [r1, #16]
 8005cdc:	4605      	mov	r5, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	b913      	cbnz	r3, 8005ce8 <_fflush_r+0x10>
 8005ce2:	2500      	movs	r5, #0
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}
 8005ce8:	b118      	cbz	r0, 8005cf2 <_fflush_r+0x1a>
 8005cea:	6a03      	ldr	r3, [r0, #32]
 8005cec:	b90b      	cbnz	r3, 8005cf2 <_fflush_r+0x1a>
 8005cee:	f7ff fb1b 	bl	8005328 <__sinit>
 8005cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0f3      	beq.n	8005ce2 <_fflush_r+0xa>
 8005cfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005cfc:	07d0      	lsls	r0, r2, #31
 8005cfe:	d404      	bmi.n	8005d0a <_fflush_r+0x32>
 8005d00:	0599      	lsls	r1, r3, #22
 8005d02:	d402      	bmi.n	8005d0a <_fflush_r+0x32>
 8005d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d06:	f7ff fbf0 	bl	80054ea <__retarget_lock_acquire_recursive>
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	f7ff ff5f 	bl	8005bd0 <__sflush_r>
 8005d12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d14:	07da      	lsls	r2, r3, #31
 8005d16:	4605      	mov	r5, r0
 8005d18:	d4e4      	bmi.n	8005ce4 <_fflush_r+0xc>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	059b      	lsls	r3, r3, #22
 8005d1e:	d4e1      	bmi.n	8005ce4 <_fflush_r+0xc>
 8005d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d22:	f7ff fbe3 	bl	80054ec <__retarget_lock_release_recursive>
 8005d26:	e7dd      	b.n	8005ce4 <_fflush_r+0xc>

08005d28 <__malloc_lock>:
 8005d28:	4801      	ldr	r0, [pc, #4]	@ (8005d30 <__malloc_lock+0x8>)
 8005d2a:	f7ff bbde 	b.w	80054ea <__retarget_lock_acquire_recursive>
 8005d2e:	bf00      	nop
 8005d30:	200002fc 	.word	0x200002fc

08005d34 <__malloc_unlock>:
 8005d34:	4801      	ldr	r0, [pc, #4]	@ (8005d3c <__malloc_unlock+0x8>)
 8005d36:	f7ff bbd9 	b.w	80054ec <__retarget_lock_release_recursive>
 8005d3a:	bf00      	nop
 8005d3c:	200002fc 	.word	0x200002fc

08005d40 <__sread>:
 8005d40:	b510      	push	{r4, lr}
 8005d42:	460c      	mov	r4, r1
 8005d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d48:	f000 f9ac 	bl	80060a4 <_read_r>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	bfab      	itete	ge
 8005d50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d52:	89a3      	ldrhlt	r3, [r4, #12]
 8005d54:	181b      	addge	r3, r3, r0
 8005d56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d5a:	bfac      	ite	ge
 8005d5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d5e:	81a3      	strhlt	r3, [r4, #12]
 8005d60:	bd10      	pop	{r4, pc}

08005d62 <__swrite>:
 8005d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d66:	461f      	mov	r7, r3
 8005d68:	898b      	ldrh	r3, [r1, #12]
 8005d6a:	05db      	lsls	r3, r3, #23
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	4616      	mov	r6, r2
 8005d72:	d505      	bpl.n	8005d80 <__swrite+0x1e>
 8005d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d78:	2302      	movs	r3, #2
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f000 f980 	bl	8006080 <_lseek_r>
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d8a:	81a3      	strh	r3, [r4, #12]
 8005d8c:	4632      	mov	r2, r6
 8005d8e:	463b      	mov	r3, r7
 8005d90:	4628      	mov	r0, r5
 8005d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d96:	f000 b9a7 	b.w	80060e8 <_write_r>

08005d9a <__sseek>:
 8005d9a:	b510      	push	{r4, lr}
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da2:	f000 f96d 	bl	8006080 <_lseek_r>
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	bf15      	itete	ne
 8005dac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005dae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005db2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005db6:	81a3      	strheq	r3, [r4, #12]
 8005db8:	bf18      	it	ne
 8005dba:	81a3      	strhne	r3, [r4, #12]
 8005dbc:	bd10      	pop	{r4, pc}

08005dbe <__sclose>:
 8005dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc2:	f000 b92b 	b.w	800601c <_close_r>

08005dc6 <__swbuf_r>:
 8005dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc8:	460e      	mov	r6, r1
 8005dca:	4614      	mov	r4, r2
 8005dcc:	4605      	mov	r5, r0
 8005dce:	b118      	cbz	r0, 8005dd8 <__swbuf_r+0x12>
 8005dd0:	6a03      	ldr	r3, [r0, #32]
 8005dd2:	b90b      	cbnz	r3, 8005dd8 <__swbuf_r+0x12>
 8005dd4:	f7ff faa8 	bl	8005328 <__sinit>
 8005dd8:	69a3      	ldr	r3, [r4, #24]
 8005dda:	60a3      	str	r3, [r4, #8]
 8005ddc:	89a3      	ldrh	r3, [r4, #12]
 8005dde:	071a      	lsls	r2, r3, #28
 8005de0:	d501      	bpl.n	8005de6 <__swbuf_r+0x20>
 8005de2:	6923      	ldr	r3, [r4, #16]
 8005de4:	b943      	cbnz	r3, 8005df8 <__swbuf_r+0x32>
 8005de6:	4621      	mov	r1, r4
 8005de8:	4628      	mov	r0, r5
 8005dea:	f000 f82b 	bl	8005e44 <__swsetup_r>
 8005dee:	b118      	cbz	r0, 8005df8 <__swbuf_r+0x32>
 8005df0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005df4:	4638      	mov	r0, r7
 8005df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	6922      	ldr	r2, [r4, #16]
 8005dfc:	1a98      	subs	r0, r3, r2
 8005dfe:	6963      	ldr	r3, [r4, #20]
 8005e00:	b2f6      	uxtb	r6, r6
 8005e02:	4283      	cmp	r3, r0
 8005e04:	4637      	mov	r7, r6
 8005e06:	dc05      	bgt.n	8005e14 <__swbuf_r+0x4e>
 8005e08:	4621      	mov	r1, r4
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f7ff ff64 	bl	8005cd8 <_fflush_r>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d1ed      	bne.n	8005df0 <__swbuf_r+0x2a>
 8005e14:	68a3      	ldr	r3, [r4, #8]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	60a3      	str	r3, [r4, #8]
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	6022      	str	r2, [r4, #0]
 8005e20:	701e      	strb	r6, [r3, #0]
 8005e22:	6962      	ldr	r2, [r4, #20]
 8005e24:	1c43      	adds	r3, r0, #1
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d004      	beq.n	8005e34 <__swbuf_r+0x6e>
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	07db      	lsls	r3, r3, #31
 8005e2e:	d5e1      	bpl.n	8005df4 <__swbuf_r+0x2e>
 8005e30:	2e0a      	cmp	r6, #10
 8005e32:	d1df      	bne.n	8005df4 <__swbuf_r+0x2e>
 8005e34:	4621      	mov	r1, r4
 8005e36:	4628      	mov	r0, r5
 8005e38:	f7ff ff4e 	bl	8005cd8 <_fflush_r>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d0d9      	beq.n	8005df4 <__swbuf_r+0x2e>
 8005e40:	e7d6      	b.n	8005df0 <__swbuf_r+0x2a>
	...

08005e44 <__swsetup_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4b29      	ldr	r3, [pc, #164]	@ (8005eec <__swsetup_r+0xa8>)
 8005e48:	4605      	mov	r5, r0
 8005e4a:	6818      	ldr	r0, [r3, #0]
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	b118      	cbz	r0, 8005e58 <__swsetup_r+0x14>
 8005e50:	6a03      	ldr	r3, [r0, #32]
 8005e52:	b90b      	cbnz	r3, 8005e58 <__swsetup_r+0x14>
 8005e54:	f7ff fa68 	bl	8005328 <__sinit>
 8005e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e5c:	0719      	lsls	r1, r3, #28
 8005e5e:	d422      	bmi.n	8005ea6 <__swsetup_r+0x62>
 8005e60:	06da      	lsls	r2, r3, #27
 8005e62:	d407      	bmi.n	8005e74 <__swsetup_r+0x30>
 8005e64:	2209      	movs	r2, #9
 8005e66:	602a      	str	r2, [r5, #0]
 8005e68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e6c:	81a3      	strh	r3, [r4, #12]
 8005e6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e72:	e033      	b.n	8005edc <__swsetup_r+0x98>
 8005e74:	0758      	lsls	r0, r3, #29
 8005e76:	d512      	bpl.n	8005e9e <__swsetup_r+0x5a>
 8005e78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e7a:	b141      	cbz	r1, 8005e8e <__swsetup_r+0x4a>
 8005e7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e80:	4299      	cmp	r1, r3
 8005e82:	d002      	beq.n	8005e8a <__swsetup_r+0x46>
 8005e84:	4628      	mov	r0, r5
 8005e86:	f000 f941 	bl	800610c <_free_r>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e94:	81a3      	strh	r3, [r4, #12]
 8005e96:	2300      	movs	r3, #0
 8005e98:	6063      	str	r3, [r4, #4]
 8005e9a:	6923      	ldr	r3, [r4, #16]
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	f043 0308 	orr.w	r3, r3, #8
 8005ea4:	81a3      	strh	r3, [r4, #12]
 8005ea6:	6923      	ldr	r3, [r4, #16]
 8005ea8:	b94b      	cbnz	r3, 8005ebe <__swsetup_r+0x7a>
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eb4:	d003      	beq.n	8005ebe <__swsetup_r+0x7a>
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	4628      	mov	r0, r5
 8005eba:	f000 f83f 	bl	8005f3c <__smakebuf_r>
 8005ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ec2:	f013 0201 	ands.w	r2, r3, #1
 8005ec6:	d00a      	beq.n	8005ede <__swsetup_r+0x9a>
 8005ec8:	2200      	movs	r2, #0
 8005eca:	60a2      	str	r2, [r4, #8]
 8005ecc:	6962      	ldr	r2, [r4, #20]
 8005ece:	4252      	negs	r2, r2
 8005ed0:	61a2      	str	r2, [r4, #24]
 8005ed2:	6922      	ldr	r2, [r4, #16]
 8005ed4:	b942      	cbnz	r2, 8005ee8 <__swsetup_r+0xa4>
 8005ed6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005eda:	d1c5      	bne.n	8005e68 <__swsetup_r+0x24>
 8005edc:	bd38      	pop	{r3, r4, r5, pc}
 8005ede:	0799      	lsls	r1, r3, #30
 8005ee0:	bf58      	it	pl
 8005ee2:	6962      	ldrpl	r2, [r4, #20]
 8005ee4:	60a2      	str	r2, [r4, #8]
 8005ee6:	e7f4      	b.n	8005ed2 <__swsetup_r+0x8e>
 8005ee8:	2000      	movs	r0, #0
 8005eea:	e7f7      	b.n	8005edc <__swsetup_r+0x98>
 8005eec:	20000018 	.word	0x20000018

08005ef0 <__swhatbuf_r>:
 8005ef0:	b570      	push	{r4, r5, r6, lr}
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef8:	2900      	cmp	r1, #0
 8005efa:	b096      	sub	sp, #88	@ 0x58
 8005efc:	4615      	mov	r5, r2
 8005efe:	461e      	mov	r6, r3
 8005f00:	da0d      	bge.n	8005f1e <__swhatbuf_r+0x2e>
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f08:	f04f 0100 	mov.w	r1, #0
 8005f0c:	bf14      	ite	ne
 8005f0e:	2340      	movne	r3, #64	@ 0x40
 8005f10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f14:	2000      	movs	r0, #0
 8005f16:	6031      	str	r1, [r6, #0]
 8005f18:	602b      	str	r3, [r5, #0]
 8005f1a:	b016      	add	sp, #88	@ 0x58
 8005f1c:	bd70      	pop	{r4, r5, r6, pc}
 8005f1e:	466a      	mov	r2, sp
 8005f20:	f000 f88c 	bl	800603c <_fstat_r>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	dbec      	blt.n	8005f02 <__swhatbuf_r+0x12>
 8005f28:	9901      	ldr	r1, [sp, #4]
 8005f2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f32:	4259      	negs	r1, r3
 8005f34:	4159      	adcs	r1, r3
 8005f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f3a:	e7eb      	b.n	8005f14 <__swhatbuf_r+0x24>

08005f3c <__smakebuf_r>:
 8005f3c:	898b      	ldrh	r3, [r1, #12]
 8005f3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f40:	079d      	lsls	r5, r3, #30
 8005f42:	4606      	mov	r6, r0
 8005f44:	460c      	mov	r4, r1
 8005f46:	d507      	bpl.n	8005f58 <__smakebuf_r+0x1c>
 8005f48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	6123      	str	r3, [r4, #16]
 8005f50:	2301      	movs	r3, #1
 8005f52:	6163      	str	r3, [r4, #20]
 8005f54:	b003      	add	sp, #12
 8005f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f58:	ab01      	add	r3, sp, #4
 8005f5a:	466a      	mov	r2, sp
 8005f5c:	f7ff ffc8 	bl	8005ef0 <__swhatbuf_r>
 8005f60:	9f00      	ldr	r7, [sp, #0]
 8005f62:	4605      	mov	r5, r0
 8005f64:	4639      	mov	r1, r7
 8005f66:	4630      	mov	r0, r6
 8005f68:	f7ff fc24 	bl	80057b4 <_malloc_r>
 8005f6c:	b948      	cbnz	r0, 8005f82 <__smakebuf_r+0x46>
 8005f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f72:	059a      	lsls	r2, r3, #22
 8005f74:	d4ee      	bmi.n	8005f54 <__smakebuf_r+0x18>
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	f043 0302 	orr.w	r3, r3, #2
 8005f7e:	81a3      	strh	r3, [r4, #12]
 8005f80:	e7e2      	b.n	8005f48 <__smakebuf_r+0xc>
 8005f82:	89a3      	ldrh	r3, [r4, #12]
 8005f84:	6020      	str	r0, [r4, #0]
 8005f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f8a:	81a3      	strh	r3, [r4, #12]
 8005f8c:	9b01      	ldr	r3, [sp, #4]
 8005f8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005f92:	b15b      	cbz	r3, 8005fac <__smakebuf_r+0x70>
 8005f94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f000 f861 	bl	8006060 <_isatty_r>
 8005f9e:	b128      	cbz	r0, 8005fac <__smakebuf_r+0x70>
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	f023 0303 	bic.w	r3, r3, #3
 8005fa6:	f043 0301 	orr.w	r3, r3, #1
 8005faa:	81a3      	strh	r3, [r4, #12]
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	431d      	orrs	r5, r3
 8005fb0:	81a5      	strh	r5, [r4, #12]
 8005fb2:	e7cf      	b.n	8005f54 <__smakebuf_r+0x18>

08005fb4 <_putc_r>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	460d      	mov	r5, r1
 8005fb8:	4614      	mov	r4, r2
 8005fba:	4606      	mov	r6, r0
 8005fbc:	b118      	cbz	r0, 8005fc6 <_putc_r+0x12>
 8005fbe:	6a03      	ldr	r3, [r0, #32]
 8005fc0:	b90b      	cbnz	r3, 8005fc6 <_putc_r+0x12>
 8005fc2:	f7ff f9b1 	bl	8005328 <__sinit>
 8005fc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fc8:	07d8      	lsls	r0, r3, #31
 8005fca:	d405      	bmi.n	8005fd8 <_putc_r+0x24>
 8005fcc:	89a3      	ldrh	r3, [r4, #12]
 8005fce:	0599      	lsls	r1, r3, #22
 8005fd0:	d402      	bmi.n	8005fd8 <_putc_r+0x24>
 8005fd2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fd4:	f7ff fa89 	bl	80054ea <__retarget_lock_acquire_recursive>
 8005fd8:	68a3      	ldr	r3, [r4, #8]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	60a3      	str	r3, [r4, #8]
 8005fe0:	da05      	bge.n	8005fee <_putc_r+0x3a>
 8005fe2:	69a2      	ldr	r2, [r4, #24]
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	db12      	blt.n	800600e <_putc_r+0x5a>
 8005fe8:	b2eb      	uxtb	r3, r5
 8005fea:	2b0a      	cmp	r3, #10
 8005fec:	d00f      	beq.n	800600e <_putc_r+0x5a>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	6022      	str	r2, [r4, #0]
 8005ff4:	701d      	strb	r5, [r3, #0]
 8005ff6:	b2ed      	uxtb	r5, r5
 8005ff8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ffa:	07da      	lsls	r2, r3, #31
 8005ffc:	d405      	bmi.n	800600a <_putc_r+0x56>
 8005ffe:	89a3      	ldrh	r3, [r4, #12]
 8006000:	059b      	lsls	r3, r3, #22
 8006002:	d402      	bmi.n	800600a <_putc_r+0x56>
 8006004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006006:	f7ff fa71 	bl	80054ec <__retarget_lock_release_recursive>
 800600a:	4628      	mov	r0, r5
 800600c:	bd70      	pop	{r4, r5, r6, pc}
 800600e:	4629      	mov	r1, r5
 8006010:	4622      	mov	r2, r4
 8006012:	4630      	mov	r0, r6
 8006014:	f7ff fed7 	bl	8005dc6 <__swbuf_r>
 8006018:	4605      	mov	r5, r0
 800601a:	e7ed      	b.n	8005ff8 <_putc_r+0x44>

0800601c <_close_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4d06      	ldr	r5, [pc, #24]	@ (8006038 <_close_r+0x1c>)
 8006020:	2300      	movs	r3, #0
 8006022:	4604      	mov	r4, r0
 8006024:	4608      	mov	r0, r1
 8006026:	602b      	str	r3, [r5, #0]
 8006028:	f7fb fa2e 	bl	8001488 <_close>
 800602c:	1c43      	adds	r3, r0, #1
 800602e:	d102      	bne.n	8006036 <_close_r+0x1a>
 8006030:	682b      	ldr	r3, [r5, #0]
 8006032:	b103      	cbz	r3, 8006036 <_close_r+0x1a>
 8006034:	6023      	str	r3, [r4, #0]
 8006036:	bd38      	pop	{r3, r4, r5, pc}
 8006038:	20000308 	.word	0x20000308

0800603c <_fstat_r>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	4d07      	ldr	r5, [pc, #28]	@ (800605c <_fstat_r+0x20>)
 8006040:	2300      	movs	r3, #0
 8006042:	4604      	mov	r4, r0
 8006044:	4608      	mov	r0, r1
 8006046:	4611      	mov	r1, r2
 8006048:	602b      	str	r3, [r5, #0]
 800604a:	f7fb fa29 	bl	80014a0 <_fstat>
 800604e:	1c43      	adds	r3, r0, #1
 8006050:	d102      	bne.n	8006058 <_fstat_r+0x1c>
 8006052:	682b      	ldr	r3, [r5, #0]
 8006054:	b103      	cbz	r3, 8006058 <_fstat_r+0x1c>
 8006056:	6023      	str	r3, [r4, #0]
 8006058:	bd38      	pop	{r3, r4, r5, pc}
 800605a:	bf00      	nop
 800605c:	20000308 	.word	0x20000308

08006060 <_isatty_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4d06      	ldr	r5, [pc, #24]	@ (800607c <_isatty_r+0x1c>)
 8006064:	2300      	movs	r3, #0
 8006066:	4604      	mov	r4, r0
 8006068:	4608      	mov	r0, r1
 800606a:	602b      	str	r3, [r5, #0]
 800606c:	f7fb fa28 	bl	80014c0 <_isatty>
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d102      	bne.n	800607a <_isatty_r+0x1a>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	b103      	cbz	r3, 800607a <_isatty_r+0x1a>
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	bd38      	pop	{r3, r4, r5, pc}
 800607c:	20000308 	.word	0x20000308

08006080 <_lseek_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4d07      	ldr	r5, [pc, #28]	@ (80060a0 <_lseek_r+0x20>)
 8006084:	4604      	mov	r4, r0
 8006086:	4608      	mov	r0, r1
 8006088:	4611      	mov	r1, r2
 800608a:	2200      	movs	r2, #0
 800608c:	602a      	str	r2, [r5, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	f7fb fa21 	bl	80014d6 <_lseek>
 8006094:	1c43      	adds	r3, r0, #1
 8006096:	d102      	bne.n	800609e <_lseek_r+0x1e>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	b103      	cbz	r3, 800609e <_lseek_r+0x1e>
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	bd38      	pop	{r3, r4, r5, pc}
 80060a0:	20000308 	.word	0x20000308

080060a4 <_read_r>:
 80060a4:	b538      	push	{r3, r4, r5, lr}
 80060a6:	4d07      	ldr	r5, [pc, #28]	@ (80060c4 <_read_r+0x20>)
 80060a8:	4604      	mov	r4, r0
 80060aa:	4608      	mov	r0, r1
 80060ac:	4611      	mov	r1, r2
 80060ae:	2200      	movs	r2, #0
 80060b0:	602a      	str	r2, [r5, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f7fb f9af 	bl	8001416 <_read>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d102      	bne.n	80060c2 <_read_r+0x1e>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	b103      	cbz	r3, 80060c2 <_read_r+0x1e>
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	20000308 	.word	0x20000308

080060c8 <_sbrk_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4d06      	ldr	r5, [pc, #24]	@ (80060e4 <_sbrk_r+0x1c>)
 80060cc:	2300      	movs	r3, #0
 80060ce:	4604      	mov	r4, r0
 80060d0:	4608      	mov	r0, r1
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	f7fb fa0c 	bl	80014f0 <_sbrk>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_sbrk_r+0x1a>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_sbrk_r+0x1a>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	20000308 	.word	0x20000308

080060e8 <_write_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4d07      	ldr	r5, [pc, #28]	@ (8006108 <_write_r+0x20>)
 80060ec:	4604      	mov	r4, r0
 80060ee:	4608      	mov	r0, r1
 80060f0:	4611      	mov	r1, r2
 80060f2:	2200      	movs	r2, #0
 80060f4:	602a      	str	r2, [r5, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f7fb f9aa 	bl	8001450 <_write>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d102      	bne.n	8006106 <_write_r+0x1e>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	b103      	cbz	r3, 8006106 <_write_r+0x1e>
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	20000308 	.word	0x20000308

0800610c <_free_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4605      	mov	r5, r0
 8006110:	2900      	cmp	r1, #0
 8006112:	d041      	beq.n	8006198 <_free_r+0x8c>
 8006114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006118:	1f0c      	subs	r4, r1, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	bfb8      	it	lt
 800611e:	18e4      	addlt	r4, r4, r3
 8006120:	f7ff fe02 	bl	8005d28 <__malloc_lock>
 8006124:	4a1d      	ldr	r2, [pc, #116]	@ (800619c <_free_r+0x90>)
 8006126:	6813      	ldr	r3, [r2, #0]
 8006128:	b933      	cbnz	r3, 8006138 <_free_r+0x2c>
 800612a:	6063      	str	r3, [r4, #4]
 800612c:	6014      	str	r4, [r2, #0]
 800612e:	4628      	mov	r0, r5
 8006130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006134:	f7ff bdfe 	b.w	8005d34 <__malloc_unlock>
 8006138:	42a3      	cmp	r3, r4
 800613a:	d908      	bls.n	800614e <_free_r+0x42>
 800613c:	6820      	ldr	r0, [r4, #0]
 800613e:	1821      	adds	r1, r4, r0
 8006140:	428b      	cmp	r3, r1
 8006142:	bf01      	itttt	eq
 8006144:	6819      	ldreq	r1, [r3, #0]
 8006146:	685b      	ldreq	r3, [r3, #4]
 8006148:	1809      	addeq	r1, r1, r0
 800614a:	6021      	streq	r1, [r4, #0]
 800614c:	e7ed      	b.n	800612a <_free_r+0x1e>
 800614e:	461a      	mov	r2, r3
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	b10b      	cbz	r3, 8006158 <_free_r+0x4c>
 8006154:	42a3      	cmp	r3, r4
 8006156:	d9fa      	bls.n	800614e <_free_r+0x42>
 8006158:	6811      	ldr	r1, [r2, #0]
 800615a:	1850      	adds	r0, r2, r1
 800615c:	42a0      	cmp	r0, r4
 800615e:	d10b      	bne.n	8006178 <_free_r+0x6c>
 8006160:	6820      	ldr	r0, [r4, #0]
 8006162:	4401      	add	r1, r0
 8006164:	1850      	adds	r0, r2, r1
 8006166:	4283      	cmp	r3, r0
 8006168:	6011      	str	r1, [r2, #0]
 800616a:	d1e0      	bne.n	800612e <_free_r+0x22>
 800616c:	6818      	ldr	r0, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	6053      	str	r3, [r2, #4]
 8006172:	4408      	add	r0, r1
 8006174:	6010      	str	r0, [r2, #0]
 8006176:	e7da      	b.n	800612e <_free_r+0x22>
 8006178:	d902      	bls.n	8006180 <_free_r+0x74>
 800617a:	230c      	movs	r3, #12
 800617c:	602b      	str	r3, [r5, #0]
 800617e:	e7d6      	b.n	800612e <_free_r+0x22>
 8006180:	6820      	ldr	r0, [r4, #0]
 8006182:	1821      	adds	r1, r4, r0
 8006184:	428b      	cmp	r3, r1
 8006186:	bf04      	itt	eq
 8006188:	6819      	ldreq	r1, [r3, #0]
 800618a:	685b      	ldreq	r3, [r3, #4]
 800618c:	6063      	str	r3, [r4, #4]
 800618e:	bf04      	itt	eq
 8006190:	1809      	addeq	r1, r1, r0
 8006192:	6021      	streq	r1, [r4, #0]
 8006194:	6054      	str	r4, [r2, #4]
 8006196:	e7ca      	b.n	800612e <_free_r+0x22>
 8006198:	bd38      	pop	{r3, r4, r5, pc}
 800619a:	bf00      	nop
 800619c:	20000304 	.word	0x20000304

080061a0 <_init>:
 80061a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a2:	bf00      	nop
 80061a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a6:	bc08      	pop	{r3}
 80061a8:	469e      	mov	lr, r3
 80061aa:	4770      	bx	lr

080061ac <_fini>:
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ae:	bf00      	nop
 80061b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b2:	bc08      	pop	{r3}
 80061b4:	469e      	mov	lr, r3
 80061b6:	4770      	bx	lr
